{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "kind-control-plane",
                "uid": "73a32146-7ef8-494f-866c-bcc383dc898c",
                "resourceVersion": "814",
                "creationTimestamp": "2023-01-03T01:13:29Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "kind-control-plane",
                    "kubernetes.io/os": "linux",
                    "node-role.kubernetes.io/control-plane": "",
                    "node.kubernetes.io/exclude-from-external-load-balancers": ""
                },
                "annotations": {
                    "kubeadm.alpha.kubernetes.io/cri-socket": "unix:///run/containerd/containerd.sock",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {
                "podCIDR": "10.244.0.0/24",
                "podCIDRs": [
                    "10.244.0.0/24"
                ],
                "providerID": "kind://docker/kind/kind-control-plane"
            },
            "status": {
                "capacity": {
                    "cpu": "4",
                    "ephemeral-storage": "61202244Ki",
                    "hugepages-2Mi": "0",
                    "memory": "8048092Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "4",
                    "ephemeral-storage": "61202244Ki",
                    "hugepages-2Mi": "0",
                    "memory": "8048092Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2023-01-03T01:19:01Z",
                        "lastTransitionTime": "2023-01-03T01:13:25Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2023-01-03T01:19:01Z",
                        "lastTransitionTime": "2023-01-03T01:13:25Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2023-01-03T01:19:01Z",
                        "lastTransitionTime": "2023-01-03T01:13:25Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2023-01-03T01:19:01Z",
                        "lastTransitionTime": "2023-01-03T01:13:54Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "172.18.0.2"
                    },
                    {
                        "type": "Hostname",
                        "address": "kind-control-plane"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "1b1073d64c3d4e67b85d788befb8bf4c",
                    "systemUUID": "1b1073d64c3d4e67b85d788befb8bf4c",
                    "bootID": "7781d723-5a4c-4568-9cc3-0a3aa7a67df5",
                    "kernelVersion": "5.15.49-linuxkit",
                    "osImage": "Ubuntu 22.04.1 LTS",
                    "containerRuntimeVersion": "containerd://1.6.9",
                    "kubeletVersion": "v1.25.3",
                    "kubeProxyVersion": "v1.25.3",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "registry.k8s.io/etcd:3.5.4-0"
                        ],
                        "sizeBytes": 102157811
                    },
                    {
                        "names": [
                            "docker.io/library/import-2022-10-25@sha256:4002c19dafb94b1995fc598fae590f70cac10135f61ca2551bd97aae37ed9c4a",
                            "registry.k8s.io/kube-apiserver:v1.25.3"
                        ],
                        "sizeBytes": 76530158
                    },
                    {
                        "names": [
                            "docker.io/library/import-2022-10-25@sha256:1c35781a4b6011d5c27bedbba7ca130db72c4aaf74d108c60bc77ae49130e5e4",
                            "registry.k8s.io/kube-controller-manager:v1.25.3"
                        ],
                        "sizeBytes": 64499836
                    },
                    {
                        "names": [
                            "docker.io/library/import-2022-10-25@sha256:0dae4b69c2aa90e6c24691ebbe2e860e2a1ae68463a622c627fb58110153d950",
                            "registry.k8s.io/kube-proxy:v1.25.3"
                        ],
                        "sizeBytes": 63275005
                    },
                    {
                        "names": [
                            "docker.io/library/import-2022-10-25@sha256:409b0e81d9aecf59df96df445a3171f43e2ae834ef6c9e77b1492c4d19bfd78d",
                            "registry.k8s.io/kube-scheduler:v1.25.3"
                        ],
                        "sizeBytes": 51921020
                    },
                    {
                        "names": [
                            "docker.io/kindest/kindnetd:v20221004-44d545d1"
                        ],
                        "sizeBytes": 25830582
                    },
                    {
                        "names": [
                            "docker.io/kindest/local-path-provisioner:v0.0.22-kind.0"
                        ],
                        "sizeBytes": 17375346
                    },
                    {
                        "names": [
                            "registry.k8s.io/coredns/coredns:v1.9.3"
                        ],
                        "sizeBytes": 14837849
                    },
                    {
                        "names": [
                            "docker.io/kindest/local-path-helper:v20220607-9a4d8d2a"
                        ],
                        "sizeBytes": 2859509
                    },
                    {
                        "names": [
                            "registry.k8s.io/pause:3.7"
                        ],
                        "sizeBytes": 311278
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-565d847f94-6kvg7.1736a7738f8b075e",
                "namespace": "kube-system",
                "uid": "786db556-e803-41de-821d-92c3180cef51",
                "resourceVersion": "376",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-6kvg7",
                "uid": "8c8d127c-2863-4852-9dd5-ae59098372b2",
                "apiVersion": "v1",
                "resourceVersion": "369"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had untolerated taint {node.kubernetes.io/not-ready: }. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2023-01-03T01:13:46Z",
            "lastTimestamp": "2023-01-03T01:13:46Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-6kvg7.1736a7758b802baa",
                "namespace": "kube-system",
                "uid": "88008c27-d5e4-4b4e-98df-989ea43102a4",
                "resourceVersion": "417",
                "creationTimestamp": "2023-01-03T01:13:54Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-6kvg7",
                "uid": "8c8d127c-2863-4852-9dd5-ae59098372b2",
                "apiVersion": "v1",
                "resourceVersion": "378"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-565d847f94-6kvg7 to kind-control-plane",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2023-01-03T01:13:54Z",
            "lastTimestamp": "2023-01-03T01:13:54Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-6kvg7.1736a775b63dd3f4",
                "namespace": "kube-system",
                "uid": "6c531b7b-e378-491e-918a-60ea77d3993d",
                "resourceVersion": "421",
                "creationTimestamp": "2023-01-03T01:13:55Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-6kvg7",
                "uid": "8c8d127c-2863-4852-9dd5-ae59098372b2",
                "apiVersion": "v1",
                "resourceVersion": "412",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"registry.k8s.io/coredns/coredns:v1.9.3\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:55Z",
            "lastTimestamp": "2023-01-03T01:13:55Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-6kvg7.1736a7764a0acfc9",
                "namespace": "kube-system",
                "uid": "3810cf44-29fc-4d35-b622-ca3c8facbb33",
                "resourceVersion": "426",
                "creationTimestamp": "2023-01-03T01:13:58Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-6kvg7",
                "uid": "8c8d127c-2863-4852-9dd5-ae59098372b2",
                "apiVersion": "v1",
                "resourceVersion": "412",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:58Z",
            "lastTimestamp": "2023-01-03T01:13:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-6kvg7.1736a7765f800d69",
                "namespace": "kube-system",
                "uid": "aec2c24b-29c7-45f3-877a-e367a95d21e0",
                "resourceVersion": "430",
                "creationTimestamp": "2023-01-03T01:13:58Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-6kvg7",
                "uid": "8c8d127c-2863-4852-9dd5-ae59098372b2",
                "apiVersion": "v1",
                "resourceVersion": "412",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:58Z",
            "lastTimestamp": "2023-01-03T01:13:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-x6nhp.1736a77391413f77",
                "namespace": "kube-system",
                "uid": "6ad59505-ef47-444f-945f-85e52f2b090d",
                "resourceVersion": "381",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-x6nhp",
                "uid": "0c703e1a-fc9c-474a-bb1f-3244959f7954",
                "apiVersion": "v1",
                "resourceVersion": "373"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had untolerated taint {node.kubernetes.io/not-ready: }. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2023-01-03T01:13:46Z",
            "lastTimestamp": "2023-01-03T01:13:46Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-x6nhp.1736a7758b7b3ab3",
                "namespace": "kube-system",
                "uid": "98c54e20-f0db-4386-b75d-e7850180b2ef",
                "resourceVersion": "415",
                "creationTimestamp": "2023-01-03T01:13:54Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-x6nhp",
                "uid": "0c703e1a-fc9c-474a-bb1f-3244959f7954",
                "apiVersion": "v1",
                "resourceVersion": "382"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-565d847f94-x6nhp to kind-control-plane",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2023-01-03T01:13:54Z",
            "lastTimestamp": "2023-01-03T01:13:54Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-x6nhp.1736a775ccd20193",
                "namespace": "kube-system",
                "uid": "a7dbce03-bf8e-4614-a537-498afe1c7297",
                "resourceVersion": "422",
                "creationTimestamp": "2023-01-03T01:13:56Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-x6nhp",
                "uid": "0c703e1a-fc9c-474a-bb1f-3244959f7954",
                "apiVersion": "v1",
                "resourceVersion": "413",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"registry.k8s.io/coredns/coredns:v1.9.3\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:56Z",
            "lastTimestamp": "2023-01-03T01:13:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-x6nhp.1736a7764e9b0959",
                "namespace": "kube-system",
                "uid": "2f6e6aa8-9e86-478f-a771-28a83c1ca4d7",
                "resourceVersion": "427",
                "creationTimestamp": "2023-01-03T01:13:58Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-x6nhp",
                "uid": "0c703e1a-fc9c-474a-bb1f-3244959f7954",
                "apiVersion": "v1",
                "resourceVersion": "413",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:58Z",
            "lastTimestamp": "2023-01-03T01:13:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-x6nhp.1736a7766a872a1a",
                "namespace": "kube-system",
                "uid": "3cc19cd2-8686-47a2-8749-a0a653544b1d",
                "resourceVersion": "431",
                "creationTimestamp": "2023-01-03T01:13:58Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-x6nhp",
                "uid": "0c703e1a-fc9c-474a-bb1f-3244959f7954",
                "apiVersion": "v1",
                "resourceVersion": "413",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:58Z",
            "lastTimestamp": "2023-01-03T01:13:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-x6nhp.1736a7767449fdc7",
                "namespace": "kube-system",
                "uid": "b3e8930e-b67d-4fe7-9661-130233ebdbbe",
                "resourceVersion": "434",
                "creationTimestamp": "2023-01-03T01:13:58Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-565d847f94-x6nhp",
                "uid": "0c703e1a-fc9c-474a-bb1f-3244959f7954",
                "apiVersion": "v1",
                "resourceVersion": "413",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Unhealthy",
            "message": "Readiness probe failed: HTTP probe failed with statuscode: 503",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:58Z",
            "lastTimestamp": "2023-01-03T01:13:58Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94.1736a7738e286183",
                "namespace": "kube-system",
                "uid": "898e66a6-b023-4613-8c64-68129784749d",
                "resourceVersion": "375",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-565d847f94",
                "uid": "feeaccda-99e6-4ba5-a750-5bba00b7a457",
                "apiVersion": "apps/v1",
                "resourceVersion": "344"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-565d847f94-6kvg7",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2023-01-03T01:13:46Z",
            "lastTimestamp": "2023-01-03T01:13:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-565d847f94.1736a7738f6c8db5",
                "namespace": "kube-system",
                "uid": "429cf1b4-0b85-4e3c-8cca-529cd367a62b",
                "resourceVersion": "379",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-565d847f94",
                "uid": "feeaccda-99e6-4ba5-a750-5bba00b7a457",
                "apiVersion": "apps/v1",
                "resourceVersion": "344"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-565d847f94-x6nhp",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2023-01-03T01:13:46Z",
            "lastTimestamp": "2023-01-03T01:13:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns.1736a7737b5d5ed5",
                "namespace": "kube-system",
                "uid": "dd6f6ac1-bccc-43a6-84a5-d068e4619482",
                "resourceVersion": "350",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "coredns",
                "uid": "723a8114-7d5f-42e7-b362-65fc9fe62b15",
                "apiVersion": "apps/v1",
                "resourceVersion": "242"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set coredns-565d847f94 to 2",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2023-01-03T01:13:46Z",
            "lastTimestamp": "2023-01-03T01:13:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kindnet-p9kz7.1736a7737696fc1a",
                "namespace": "kube-system",
                "uid": "f56476c3-31c8-4d5e-80d3-442d76d35c10",
                "resourceVersion": "340",
                "creationTimestamp": "2023-01-03T01:13:45Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kindnet-p9kz7",
                "uid": "4bf7b9e0-172f-44e8-97bc-4cd55c5baa7f",
                "apiVersion": "v1",
                "resourceVersion": "333"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kindnet-p9kz7 to kind-control-plane",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2023-01-03T01:13:45Z",
            "lastTimestamp": "2023-01-03T01:13:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kindnet-p9kz7.1736a77381fd8598",
                "namespace": "kube-system",
                "uid": "9e85dbbc-d0ba-49f7-a4b7-18ed87886181",
                "resourceVersion": "359",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kindnet-p9kz7",
                "uid": "4bf7b9e0-172f-44e8-97bc-4cd55c5baa7f",
                "apiVersion": "v1",
                "resourceVersion": "336"
            },
            "reason": "FailedMount",
            "message": "MountVolume.SetUp failed for volume \"kube-api-access-j9b8s\" : configmap \"kube-root-ca.crt\" not found",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:46Z",
            "lastTimestamp": "2023-01-03T01:13:46Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kindnet-p9kz7.1736a773dcd9764f",
                "namespace": "kube-system",
                "uid": "1eeccfef-8afe-4344-85c1-b75b6cc13be1",
                "resourceVersion": "388",
                "creationTimestamp": "2023-01-03T01:13:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kindnet-p9kz7",
                "uid": "4bf7b9e0-172f-44e8-97bc-4cd55c5baa7f",
                "apiVersion": "v1",
                "resourceVersion": "336",
                "fieldPath": "spec.containers{kindnet-cni}"
            },
            "reason": "Pulled",
            "message": "Container image \"docker.io/kindest/kindnetd:v20221004-44d545d1\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:47Z",
            "lastTimestamp": "2023-01-03T01:13:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kindnet-p9kz7.1736a7746a17c014",
                "namespace": "kube-system",
                "uid": "6566b33c-af52-41b9-ada0-85957ce2c74e",
                "resourceVersion": "396",
                "creationTimestamp": "2023-01-03T01:13:50Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kindnet-p9kz7",
                "uid": "4bf7b9e0-172f-44e8-97bc-4cd55c5baa7f",
                "apiVersion": "v1",
                "resourceVersion": "336",
                "fieldPath": "spec.containers{kindnet-cni}"
            },
            "reason": "Created",
            "message": "Created container kindnet-cni",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:50Z",
            "lastTimestamp": "2023-01-03T01:13:50Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kindnet-p9kz7.1736a774a10fbfc0",
                "namespace": "kube-system",
                "uid": "3338275b-6fab-4c66-90be-0ef8e625bd9f",
                "resourceVersion": "399",
                "creationTimestamp": "2023-01-03T01:13:50Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kindnet-p9kz7",
                "uid": "4bf7b9e0-172f-44e8-97bc-4cd55c5baa7f",
                "apiVersion": "v1",
                "resourceVersion": "336",
                "fieldPath": "spec.containers{kindnet-cni}"
            },
            "reason": "Started",
            "message": "Started container kindnet-cni",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:50Z",
            "lastTimestamp": "2023-01-03T01:13:50Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kindnet.1736a77375eca6ac",
                "namespace": "kube-system",
                "uid": "dc12a9e2-187d-4953-b513-eef42ae0e70c",
                "resourceVersion": "337",
                "creationTimestamp": "2023-01-03T01:13:45Z"
            },
            "involvedObject": {
                "kind": "DaemonSet",
                "namespace": "kube-system",
                "name": "kindnet",
                "uid": "822bc987-0631-43c5-9e7c-eec896b449cb",
                "apiVersion": "apps/v1",
                "resourceVersion": "280"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kindnet-p9kz7",
            "source": {
                "component": "daemonset-controller"
            },
            "firstTimestamp": "2023-01-03T01:13:45Z",
            "lastTimestamp": "2023-01-03T01:13:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-controller-manager.1736a770544145f2",
                "namespace": "kube-system",
                "uid": "42ec0311-4f96-4ea4-bb10-8f496e03925c",
                "resourceVersion": "205",
                "creationTimestamp": "2023-01-03T01:13:32Z"
            },
            "involvedObject": {
                "kind": "Lease",
                "namespace": "kube-system",
                "name": "kube-controller-manager",
                "uid": "2e3f1d0b-a2bf-4878-a0fb-78c8effcff13",
                "apiVersion": "coordination.k8s.io/v1",
                "resourceVersion": "203"
            },
            "reason": "LeaderElection",
            "message": "kind-control-plane_4279a7ed-9600-41b3-bd6d-82043a37dd72 became leader",
            "source": {
                "component": "kube-controller-manager"
            },
            "firstTimestamp": "2023-01-03T01:13:32Z",
            "lastTimestamp": "2023-01-03T01:13:32Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-gvsl4.1736a773773e6f8c",
                "namespace": "kube-system",
                "uid": "83ae1ef3-5c36-44d5-a74b-de281a481201",
                "resourceVersion": "341",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-gvsl4",
                "uid": "1d36aa29-498f-4e2f-96b1-e8093b8ebb08",
                "apiVersion": "v1",
                "resourceVersion": "332"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kube-proxy-gvsl4 to kind-control-plane",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2023-01-03T01:13:45Z",
            "lastTimestamp": "2023-01-03T01:13:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-gvsl4.1736a77381b0546d",
                "namespace": "kube-system",
                "uid": "8f9e13a9-732e-42b8-84d2-764f30e3efc8",
                "resourceVersion": "357",
                "creationTimestamp": "2023-01-03T01:13:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-gvsl4",
                "uid": "1d36aa29-498f-4e2f-96b1-e8093b8ebb08",
                "apiVersion": "v1",
                "resourceVersion": "339"
            },
            "reason": "FailedMount",
            "message": "MountVolume.SetUp failed for volume \"kube-api-access-tch84\" : configmap \"kube-root-ca.crt\" not found",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:46Z",
            "lastTimestamp": "2023-01-03T01:13:46Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-gvsl4.1736a773bf375e07",
                "namespace": "kube-system",
                "uid": "021cfb6e-96a6-4ce7-bde2-488e47f77408",
                "resourceVersion": "387",
                "creationTimestamp": "2023-01-03T01:13:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-gvsl4",
                "uid": "1d36aa29-498f-4e2f-96b1-e8093b8ebb08",
                "apiVersion": "v1",
                "resourceVersion": "339",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Pulled",
            "message": "Container image \"registry.k8s.io/kube-proxy:v1.25.3\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:47Z",
            "lastTimestamp": "2023-01-03T01:13:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-gvsl4.1736a77402a75c89",
                "namespace": "kube-system",
                "uid": "e6ff99f1-f7cc-482d-be03-1b3e697e9d1c",
                "resourceVersion": "390",
                "creationTimestamp": "2023-01-03T01:13:48Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-gvsl4",
                "uid": "1d36aa29-498f-4e2f-96b1-e8093b8ebb08",
                "apiVersion": "v1",
                "resourceVersion": "339",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Created",
            "message": "Created container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:48Z",
            "lastTimestamp": "2023-01-03T01:13:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-gvsl4.1736a77412ae3a8d",
                "namespace": "kube-system",
                "uid": "7affa084-1891-414f-a492-2b35a2330408",
                "resourceVersion": "391",
                "creationTimestamp": "2023-01-03T01:13:48Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-gvsl4",
                "uid": "1d36aa29-498f-4e2f-96b1-e8093b8ebb08",
                "apiVersion": "v1",
                "resourceVersion": "339",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Started",
            "message": "Started container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:48Z",
            "lastTimestamp": "2023-01-03T01:13:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy.1736a7737560e76b",
                "namespace": "kube-system",
                "uid": "47ca4f8c-b895-40fd-9df3-0e2cad356ab8",
                "resourceVersion": "334",
                "creationTimestamp": "2023-01-03T01:13:45Z"
            },
            "involvedObject": {
                "kind": "DaemonSet",
                "namespace": "kube-system",
                "name": "kube-proxy",
                "uid": "3383c130-3d0e-4382-a9b0-32eff9b0908d",
                "apiVersion": "apps/v1",
                "resourceVersion": "246"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kube-proxy-gvsl4",
            "source": {
                "component": "daemonset-controller"
            },
            "firstTimestamp": "2023-01-03T01:13:45Z",
            "lastTimestamp": "2023-01-03T01:13:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-scheduler.1736a770b19c7030",
                "namespace": "kube-system",
                "uid": "6c3a120f-0fe3-4727-bda0-d935fb801217",
                "resourceVersion": "253",
                "creationTimestamp": "2023-01-03T01:13:34Z"
            },
            "involvedObject": {
                "kind": "Lease",
                "namespace": "kube-system",
                "name": "kube-scheduler",
                "uid": "5df7dace-f326-40cb-a7bc-e7e7d3c148f5",
                "apiVersion": "coordination.k8s.io/v1",
                "resourceVersion": "250"
            },
            "reason": "LeaderElection",
            "message": "kind-control-plane_3923cb43-dfbe-4d97-8680-ff0bdf8eb630 became leader",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2023-01-03T01:13:34Z",
            "lastTimestamp": "2023-01-03T01:13:34Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "uid": "485a03d5-4bc1-474a-b898-35dfc9d8d617",
                "resourceVersion": "244",
                "creationTimestamp": "2023-01-03T01:13:33Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "CoreDNS"
                },
                "annotations": {
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.96.0.10",
                "clusterIPs": [
                    "10.96.0.10"
                ],
                "type": "ClusterIP",
                "sessionAffinity": "None",
                "ipFamilies": [
                    "IPv4"
                ],
                "ipFamilyPolicy": "SingleStack",
                "internalTrafficPolicy": "Cluster"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "kindnet",
                "namespace": "kube-system",
                "uid": "822bc987-0631-43c5-9e7c-eec896b449cb",
                "resourceVersion": "401",
                "generation": 1,
                "creationTimestamp": "2023-01-03T01:13:38Z",
                "labels": {
                    "app": "kindnet",
                    "k8s-app": "kindnet",
                    "tier": "node"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "app": "kindnet"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "kindnet",
                            "k8s-app": "kindnet",
                            "tier": "node"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "cni-cfg",
                                "hostPath": {
                                    "path": "/etc/cni/net.d",
                                    "type": ""
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kindnet-cni",
                                "image": "docker.io/kindest/kindnetd:v20221004-44d545d1",
                                "env": [
                                    {
                                        "name": "HOST_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.hostIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.podIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_SUBNET",
                                        "value": "10.244.0.0/16"
                                    },
                                    {
                                        "name": "CONTROL_PLANE_ENDPOINT",
                                        "value": "kind-control-plane:6443"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "50Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "50Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "cni-cfg",
                                        "mountPath": "/etc/cni/net.d"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_RAW",
                                            "NET_ADMIN"
                                        ]
                                    },
                                    "privileged": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kindnet",
                        "serviceAccount": "kindnet",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists"
                            }
                        ]
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": 0
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        },
        {
            "metadata": {
                "name": "kube-proxy",
                "namespace": "kube-system",
                "uid": "3383c130-3d0e-4382-a9b0-32eff9b0908d",
                "resourceVersion": "394",
                "generation": 1,
                "creationTimestamp": "2023-01-03T01:13:34Z",
                "labels": {
                    "k8s-app": "kube-proxy"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-proxy"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-proxy"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-proxy",
                                "configMap": {
                                    "name": "kube-proxy",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kube-proxy",
                                "image": "registry.k8s.io/kube-proxy:v1.25.3",
                                "command": [
                                    "/usr/local/bin/kube-proxy",
                                    "--config=/var/lib/kube-proxy/config.conf",
                                    "--hostname-override=$(NODE_NAME)"
                                ],
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kube-proxy",
                                        "mountPath": "/var/lib/kube-proxy"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "kube-proxy",
                        "serviceAccount": "kube-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": 0
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "uid": "723a8114-7d5f-42e7-b362-65fc9fe62b15",
                "resourceVersion": "452",
                "generation": 1,
                "creationTimestamp": "2023-01-03T01:13:33Z",
                "labels": {
                    "k8s-app": "kube-dns"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 2,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "registry.k8s.io/coredns/coredns:v1.9.3",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "weight": 100,
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchExpressions": [
                                                    {
                                                        "key": "k8s-app",
                                                        "operator": "In",
                                                        "values": [
                                                            "kube-dns"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        }
                                    }
                                ]
                            }
                        },
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            },
                            {
                                "key": "node-role.kubernetes.io/control-plane",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 2,
                "updatedReplicas": 2,
                "readyReplicas": 2,
                "availableReplicas": 2,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2023-01-03T01:13:58Z",
                        "lastTransitionTime": "2023-01-03T01:13:58Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2023-01-03T01:14:00Z",
                        "lastTransitionTime": "2023-01-03T01:13:46Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-565d847f94\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-565d847f94",
                "namespace": "kube-system",
                "uid": "feeaccda-99e6-4ba5-a750-5bba00b7a457",
                "resourceVersion": "451",
                "generation": 1,
                "creationTimestamp": "2023-01-03T01:13:46Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "565d847f94"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "2",
                    "deployment.kubernetes.io/max-replicas": "3",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "723a8114-7d5f-42e7-b362-65fc9fe62b15",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 2,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "565d847f94"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "565d847f94"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "registry.k8s.io/coredns/coredns:v1.9.3",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "weight": 100,
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchExpressions": [
                                                    {
                                                        "key": "k8s-app",
                                                        "operator": "In",
                                                        "values": [
                                                            "kube-dns"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        }
                                    }
                                ]
                            }
                        },
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            },
                            {
                                "key": "node-role.kubernetes.io/control-plane",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 2,
                "fullyLabeledReplicas": 2,
                "readyReplicas": 2,
                "availableReplicas": 2,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-565d847f94-6kvg7",
                "generateName": "coredns-565d847f94-",
                "namespace": "kube-system",
                "uid": "8c8d127c-2863-4852-9dd5-ae59098372b2",
                "resourceVersion": "437",
                "creationTimestamp": "2023-01-03T01:13:46Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "565d847f94"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-565d847f94",
                        "uid": "feeaccda-99e6-4ba5-a750-5bba00b7a457",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "kube-api-access-gp7gh",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "registry.k8s.io/coredns/coredns:v1.9.3",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "kube-api-access-gp7gh",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "kind-control-plane",
                "securityContext": {},
                "affinity": {
                    "podAntiAffinity": {
                        "preferredDuringSchedulingIgnoredDuringExecution": [
                            {
                                "weight": 100,
                                "podAffinityTerm": {
                                    "labelSelector": {
                                        "matchExpressions": [
                                            {
                                                "key": "k8s-app",
                                                "operator": "In",
                                                "values": [
                                                    "kube-dns"
                                                ]
                                            }
                                        ]
                                    },
                                    "topologyKey": "kubernetes.io/hostname"
                                }
                            }
                        ]
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node-role.kubernetes.io/control-plane",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:54Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:58Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:58Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:54Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "10.244.0.3",
                "podIPs": [
                    {
                        "ip": "10.244.0.3"
                    }
                ],
                "startTime": "2023-01-03T01:13:54Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:58Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/coredns/coredns:v1.9.3",
                        "imageID": "sha256:5185b96f0becf59032b8e3646e99f84d9655dff3ac9e2605e0dc77f9c441ae4a",
                        "containerID": "containerd://712bd3dc023c26e4cc325efc3c926fc6a5ca83afd3b87eb1e0753e784f001619",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "coredns-565d847f94-x6nhp",
                "generateName": "coredns-565d847f94-",
                "namespace": "kube-system",
                "uid": "0c703e1a-fc9c-474a-bb1f-3244959f7954",
                "resourceVersion": "448",
                "creationTimestamp": "2023-01-03T01:13:46Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "565d847f94"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-565d847f94",
                        "uid": "feeaccda-99e6-4ba5-a750-5bba00b7a457",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "kube-api-access-gch7p",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "registry.k8s.io/coredns/coredns:v1.9.3",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "kube-api-access-gch7p",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "kind-control-plane",
                "securityContext": {},
                "affinity": {
                    "podAntiAffinity": {
                        "preferredDuringSchedulingIgnoredDuringExecution": [
                            {
                                "weight": 100,
                                "podAffinityTerm": {
                                    "labelSelector": {
                                        "matchExpressions": [
                                            {
                                                "key": "k8s-app",
                                                "operator": "In",
                                                "values": [
                                                    "kube-dns"
                                                ]
                                            }
                                        ]
                                    },
                                    "topologyKey": "kubernetes.io/hostname"
                                }
                            }
                        ]
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node-role.kubernetes.io/control-plane",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:54Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:59Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:59Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:54Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "10.244.0.4",
                "podIPs": [
                    {
                        "ip": "10.244.0.4"
                    }
                ],
                "startTime": "2023-01-03T01:13:54Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:58Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/coredns/coredns:v1.9.3",
                        "imageID": "sha256:5185b96f0becf59032b8e3646e99f84d9655dff3ac9e2605e0dc77f9c441ae4a",
                        "containerID": "containerd://319269a8a3f8147e8f6aadd3929a71ba06b6482bef48c705329532d97d53d0cb",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "etcd-kind-control-plane",
                "namespace": "kube-system",
                "uid": "c3208eca-d6e8-4853-a2da-010d0b5c9046",
                "resourceVersion": "283",
                "creationTimestamp": "2023-01-03T01:13:34Z",
                "labels": {
                    "component": "etcd",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/etcd.advertise-client-urls": "https://172.18.0.2:2379",
                    "kubernetes.io/config.hash": "0656ab70da313d6449b17f099a2a3110",
                    "kubernetes.io/config.mirror": "0656ab70da313d6449b17f099a2a3110",
                    "kubernetes.io/config.seen": "2023-01-03T01:13:34.322723738Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "kind-control-plane",
                        "uid": "73a32146-7ef8-494f-866c-bcc383dc898c",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "etcd-certs",
                        "hostPath": {
                            "path": "/etc/kubernetes/pki/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etcd-data",
                        "hostPath": {
                            "path": "/var/lib/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "etcd",
                        "image": "registry.k8s.io/etcd:3.5.4-0",
                        "command": [
                            "etcd",
                            "--advertise-client-urls=https://172.18.0.2:2379",
                            "--cert-file=/etc/kubernetes/pki/etcd/server.crt",
                            "--client-cert-auth=true",
                            "--data-dir=/var/lib/etcd",
                            "--experimental-initial-corrupt-check=true",
                            "--experimental-watch-progress-notify-interval=5s",
                            "--initial-advertise-peer-urls=https://172.18.0.2:2380",
                            "--initial-cluster=kind-control-plane=https://172.18.0.2:2380",
                            "--key-file=/etc/kubernetes/pki/etcd/server.key",
                            "--listen-client-urls=https://127.0.0.1:2379,https://172.18.0.2:2379",
                            "--listen-metrics-urls=http://127.0.0.1:2381",
                            "--listen-peer-urls=https://172.18.0.2:2380",
                            "--name=kind-control-plane",
                            "--peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt",
                            "--peer-client-cert-auth=true",
                            "--peer-key-file=/etc/kubernetes/pki/etcd/peer.key",
                            "--peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt",
                            "--snapshot-count=10000",
                            "--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m",
                                "memory": "100Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "etcd-data",
                                "mountPath": "/var/lib/etcd"
                            },
                            {
                                "name": "etcd-certs",
                                "mountPath": "/etc/kubernetes/pki/etcd"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health?exclude=NOSPACE\u0026serializable=true",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/health?serializable=false",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "kind-control-plane",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:34Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:37Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:37Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:34Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "172.18.0.2",
                "podIPs": [
                    {
                        "ip": "172.18.0.2"
                    }
                ],
                "startTime": "2023-01-03T01:13:34Z",
                "containerStatuses": [
                    {
                        "name": "etcd",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:22Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/etcd:3.5.4-0",
                        "imageID": "sha256:a8a176a5d5d698f9409dc246f81fa69d37d4a2f4132ba5e62e72a78476b27f66",
                        "containerID": "containerd://01092dc43236cf4841141c5a96e57bff06d0ae2ffb4bbf13e967cba02e26bcc2",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kindnet-p9kz7",
                "generateName": "kindnet-",
                "namespace": "kube-system",
                "uid": "4bf7b9e0-172f-44e8-97bc-4cd55c5baa7f",
                "resourceVersion": "400",
                "creationTimestamp": "2023-01-03T01:13:45Z",
                "labels": {
                    "app": "kindnet",
                    "controller-revision-hash": "6f5f87b9f5",
                    "k8s-app": "kindnet",
                    "pod-template-generation": "1",
                    "tier": "node"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kindnet",
                        "uid": "822bc987-0631-43c5-9e7c-eec896b449cb",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "cni-cfg",
                        "hostPath": {
                            "path": "/etc/cni/net.d",
                            "type": ""
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-api-access-j9b8s",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kindnet-cni",
                        "image": "docker.io/kindest/kindnetd:v20221004-44d545d1",
                        "env": [
                            {
                                "name": "HOST_IP",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "status.hostIP"
                                    }
                                }
                            },
                            {
                                "name": "POD_IP",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "status.podIP"
                                    }
                                }
                            },
                            {
                                "name": "POD_SUBNET",
                                "value": "10.244.0.0/16"
                            },
                            {
                                "name": "CONTROL_PLANE_ENDPOINT",
                                "value": "kind-control-plane:6443"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "100m",
                                "memory": "50Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "50Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "cni-cfg",
                                "mountPath": "/etc/cni/net.d"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-api-access-j9b8s",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_RAW",
                                    "NET_ADMIN"
                                ]
                            },
                            "privileged": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "kindnet",
                "serviceAccount": "kindnet",
                "nodeName": "kind-control-plane",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "kind-control-plane"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:51Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:51Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:45Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "172.18.0.2",
                "podIPs": [
                    {
                        "ip": "172.18.0.2"
                    }
                ],
                "startTime": "2023-01-03T01:13:45Z",
                "containerStatuses": [
                    {
                        "name": "kindnet-cni",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:50Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "docker.io/kindest/kindnetd:v20221004-44d545d1",
                        "imageID": "sha256:d6e3e26021b60c625f0ef5b2dd3f9e22d2d398e05bccc4fdd7d59fbbb6a04d3f",
                        "containerID": "containerd://a1c12f93e77fde1e3acc71b02876741c3743dcab2fde85eb4aefbe2f7a35a5a5",
                        "started": true
                    }
                ],
                "qosClass": "Guaranteed"
            }
        },
        {
            "metadata": {
                "name": "kube-apiserver-kind-control-plane",
                "namespace": "kube-system",
                "uid": "bf1fb34c-c861-4d0f-8645-7860e9f2188f",
                "resourceVersion": "299",
                "creationTimestamp": "2023-01-03T01:13:34Z",
                "labels": {
                    "component": "kube-apiserver",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": "172.18.0.2:6443",
                    "kubernetes.io/config.hash": "9d154d94c881e34144512156e922afea",
                    "kubernetes.io/config.mirror": "9d154d94c881e34144512156e922afea",
                    "kubernetes.io/config.seen": "2023-01-03T01:13:34.322710536Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "kind-control-plane",
                        "uid": "73a32146-7ef8-494f-866c-bcc383dc898c",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etc-ca-certificates",
                        "hostPath": {
                            "path": "/etc/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/etc/kubernetes/pki",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-local-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/local/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-apiserver",
                        "image": "registry.k8s.io/kube-apiserver:v1.25.3",
                        "command": [
                            "kube-apiserver",
                            "--advertise-address=172.18.0.2",
                            "--allow-privileged=true",
                            "--authorization-mode=Node,RBAC",
                            "--client-ca-file=/etc/kubernetes/pki/ca.crt",
                            "--enable-admission-plugins=NodeRestriction",
                            "--enable-bootstrap-token-auth=true",
                            "--etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt",
                            "--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt",
                            "--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key",
                            "--etcd-servers=https://127.0.0.1:2379",
                            "--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt",
                            "--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt",
                            "--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key",
                            "--requestheader-allowed-names=front-proxy-client",
                            "--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt",
                            "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                            "--requestheader-group-headers=X-Remote-Group",
                            "--requestheader-username-headers=X-Remote-User",
                            "--runtime-config=",
                            "--secure-port=6443",
                            "--service-account-issuer=https://kubernetes.default.svc.cluster.local",
                            "--service-account-key-file=/etc/kubernetes/pki/sa.pub",
                            "--service-account-signing-key-file=/etc/kubernetes/pki/sa.key",
                            "--service-cluster-ip-range=10.96.0.0/16",
                            "--tls-cert-file=/etc/kubernetes/pki/apiserver.crt",
                            "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "250m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "etc-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/etc/ca-certificates"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/pki"
                            },
                            {
                                "name": "usr-local-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/local/share/ca-certificates"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 6443,
                                "host": "172.18.0.2",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readyz",
                                "port": 6443,
                                "host": "172.18.0.2",
                                "scheme": "HTTPS"
                            },
                            "timeoutSeconds": 15,
                            "periodSeconds": 1,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 6443,
                                "host": "172.18.0.2",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "kind-control-plane",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:34Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:42Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:42Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:34Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "172.18.0.2",
                "podIPs": [
                    {
                        "ip": "172.18.0.2"
                    }
                ],
                "startTime": "2023-01-03T01:13:34Z",
                "containerStatuses": [
                    {
                        "name": "kube-apiserver",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:05Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-apiserver:v1.25.3",
                        "imageID": "docker.io/library/import-2022-10-25@sha256:4002c19dafb94b1995fc598fae590f70cac10135f61ca2551bd97aae37ed9c4a",
                        "containerID": "containerd://dbee4c3f9eb6d863c592888598656ff1a04c70959fdf4cf1d2b31d73a90aa8ac",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-controller-manager-kind-control-plane",
                "namespace": "kube-system",
                "uid": "2b9d41dc-6a69-4875-a5b5-dfaa72c6d4d8",
                "resourceVersion": "315",
                "creationTimestamp": "2023-01-03T01:13:34Z",
                "labels": {
                    "component": "kube-controller-manager",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "aaff90ec64f346d418f0a93d766752c5",
                    "kubernetes.io/config.mirror": "aaff90ec64f346d418f0a93d766752c5",
                    "kubernetes.io/config.seen": "2023-01-03T01:13:34.322718460Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "kind-control-plane",
                        "uid": "73a32146-7ef8-494f-866c-bcc383dc898c",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etc-ca-certificates",
                        "hostPath": {
                            "path": "/etc/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "flexvolume-dir",
                        "hostPath": {
                            "path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/etc/kubernetes/pki",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/controller-manager.conf",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "usr-local-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/local/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-controller-manager",
                        "image": "registry.k8s.io/kube-controller-manager:v1.25.3",
                        "command": [
                            "kube-controller-manager",
                            "--allocate-node-cidrs=true",
                            "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--bind-address=127.0.0.1",
                            "--client-ca-file=/etc/kubernetes/pki/ca.crt",
                            "--cluster-cidr=10.244.0.0/16",
                            "--cluster-name=kind",
                            "--cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt",
                            "--cluster-signing-key-file=/etc/kubernetes/pki/ca.key",
                            "--controllers=*,bootstrapsigner,tokencleaner",
                            "--enable-hostpath-provisioner=true",
                            "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--leader-elect=true",
                            "--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt",
                            "--root-ca-file=/etc/kubernetes/pki/ca.crt",
                            "--service-account-private-key-file=/etc/kubernetes/pki/sa.key",
                            "--service-cluster-ip-range=10.96.0.0/16",
                            "--use-service-account-credentials=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "200m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "etc-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/etc/ca-certificates"
                            },
                            {
                                "name": "flexvolume-dir",
                                "mountPath": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/pki"
                            },
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/controller-manager.conf"
                            },
                            {
                                "name": "usr-local-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/local/share/ca-certificates"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "kind-control-plane",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:35Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:44Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:44Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:35Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "172.18.0.2",
                "podIPs": [
                    {
                        "ip": "172.18.0.2"
                    }
                ],
                "startTime": "2023-01-03T01:13:35Z",
                "containerStatuses": [
                    {
                        "name": "kube-controller-manager",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:05Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-controller-manager:v1.25.3",
                        "imageID": "docker.io/library/import-2022-10-25@sha256:1c35781a4b6011d5c27bedbba7ca130db72c4aaf74d108c60bc77ae49130e5e4",
                        "containerID": "containerd://771f760f771cbd2e6852a859073c2831e9fa7af2bf43aa36001f3103d399d96d",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-gvsl4",
                "generateName": "kube-proxy-",
                "namespace": "kube-system",
                "uid": "1d36aa29-498f-4e2f-96b1-e8093b8ebb08",
                "resourceVersion": "393",
                "creationTimestamp": "2023-01-03T01:13:45Z",
                "labels": {
                    "controller-revision-hash": "b9c5d5dc4",
                    "k8s-app": "kube-proxy",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kube-proxy",
                        "uid": "3383c130-3d0e-4382-a9b0-32eff9b0908d",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-proxy",
                        "configMap": {
                            "name": "kube-proxy",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-api-access-tch84",
                        "projected": {
                            "sources": [
                                {
                                    "serviceAccountToken": {
                                        "expirationSeconds": 3607,
                                        "path": "token"
                                    }
                                },
                                {
                                    "configMap": {
                                        "name": "kube-root-ca.crt",
                                        "items": [
                                            {
                                                "key": "ca.crt",
                                                "path": "ca.crt"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "downwardAPI": {
                                        "items": [
                                            {
                                                "path": "namespace",
                                                "fieldRef": {
                                                    "apiVersion": "v1",
                                                    "fieldPath": "metadata.namespace"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "registry.k8s.io/kube-proxy:v1.25.3",
                        "command": [
                            "/usr/local/bin/kube-proxy",
                            "--config=/var/lib/kube-proxy/config.conf",
                            "--hostname-override=$(NODE_NAME)"
                        ],
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-proxy",
                                "mountPath": "/var/lib/kube-proxy"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-api-access-tch84",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "kube-proxy",
                "serviceAccount": "kube-proxy",
                "nodeName": "kind-control-plane",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "kind-control-plane"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:48Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:48Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:45Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "172.18.0.2",
                "podIPs": [
                    {
                        "ip": "172.18.0.2"
                    }
                ],
                "startTime": "2023-01-03T01:13:45Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:48Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-proxy:v1.25.3",
                        "imageID": "docker.io/library/import-2022-10-25@sha256:0dae4b69c2aa90e6c24691ebbe2e860e2a1ae68463a622c627fb58110153d950",
                        "containerID": "containerd://2237a535eec766f5ee2a55313511809d9633eb5ec8283a10507a8d6cb3d968db",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-scheduler-kind-control-plane",
                "namespace": "kube-system",
                "uid": "8f0fa18b-59c1-464f-8841-c3d200753df1",
                "resourceVersion": "294",
                "creationTimestamp": "2023-01-03T01:13:34Z",
                "labels": {
                    "component": "kube-scheduler",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "6d3dda2cad9846e0d48dbd5d5b9f59fc",
                    "kubernetes.io/config.mirror": "6d3dda2cad9846e0d48dbd5d5b9f59fc",
                    "kubernetes.io/config.seen": "2023-01-03T01:13:34.322721690Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "kind-control-plane",
                        "uid": "73a32146-7ef8-494f-866c-bcc383dc898c",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/scheduler.conf",
                            "type": "FileOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-scheduler",
                        "image": "registry.k8s.io/kube-scheduler:v1.25.3",
                        "command": [
                            "kube-scheduler",
                            "--authentication-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--bind-address=127.0.0.1",
                            "--kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--leader-elect=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/scheduler.conf"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "kind-control-plane",
                "hostNetwork": true,
                "securityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:35Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:41Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:41Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2023-01-03T01:13:35Z"
                    }
                ],
                "hostIP": "172.18.0.2",
                "podIP": "172.18.0.2",
                "podIPs": [
                    {
                        "ip": "172.18.0.2"
                    }
                ],
                "startTime": "2023-01-03T01:13:35Z",
                "containerStatuses": [
                    {
                        "name": "kube-scheduler",
                        "state": {
                            "running": {
                                "startedAt": "2023-01-03T01:13:04Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "registry.k8s.io/kube-scheduler:v1.25.3",
                        "imageID": "docker.io/library/import-2022-10-25@sha256:409b0e81d9aecf59df96df445a3171f43e2ae834ef6c9e77b1492c4d19bfd78d",
                        "containerID": "containerd://a662fd82db2006ba954b3b7c4935bf0328ff2cec5ab4edfa4bf166897568651f",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-565d847f94-6kvg7 ====
.:53
[INFO] plugin/reload: Running configuration SHA512 = 591cf328cccc12bc490481273e738df59329c62c0b729d94e8b61db9961c2fa5f046dd37f1cf888b953814040d180f52594972691cd6ff41be96639138a43908
CoreDNS-1.9.3
linux/amd64, go1.18.2, 45b0a11
==== END logs for container coredns of pod kube-system/coredns-565d847f94-6kvg7 ====
==== START logs for container coredns of pod kube-system/coredns-565d847f94-x6nhp ====
[INFO] plugin/ready: Still waiting on: "kubernetes"
.:53
[INFO] plugin/reload: Running configuration SHA512 = 591cf328cccc12bc490481273e738df59329c62c0b729d94e8b61db9961c2fa5f046dd37f1cf888b953814040d180f52594972691cd6ff41be96639138a43908
CoreDNS-1.9.3
linux/amd64, go1.18.2, 45b0a11
==== END logs for container coredns of pod kube-system/coredns-565d847f94-x6nhp ====
==== START logs for container etcd of pod kube-system/etcd-kind-control-plane ====
{"level":"info","ts":"2023-01-03T01:13:22.989Z","caller":"etcdmain/etcd.go:73","msg":"Running: ","args":["etcd","--advertise-client-urls=https://172.18.0.2:2379","--cert-file=/etc/kubernetes/pki/etcd/server.crt","--client-cert-auth=true","--data-dir=/var/lib/etcd","--experimental-initial-corrupt-check=true","--experimental-watch-progress-notify-interval=5s","--initial-advertise-peer-urls=https://172.18.0.2:2380","--initial-cluster=kind-control-plane=https://172.18.0.2:2380","--key-file=/etc/kubernetes/pki/etcd/server.key","--listen-client-urls=https://127.0.0.1:2379,https://172.18.0.2:2379","--listen-metrics-urls=http://127.0.0.1:2381","--listen-peer-urls=https://172.18.0.2:2380","--name=kind-control-plane","--peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt","--peer-client-cert-auth=true","--peer-key-file=/etc/kubernetes/pki/etcd/peer.key","--peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt","--snapshot-count=10000","--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt"]}
{"level":"info","ts":"2023-01-03T01:13:22.990Z","caller":"embed/etcd.go:131","msg":"configuring peer listeners","listen-peer-urls":["https://172.18.0.2:2380"]}
{"level":"info","ts":"2023-01-03T01:13:22.991Z","caller":"embed/etcd.go:479","msg":"starting with peer TLS","tls-info":"cert = /etc/kubernetes/pki/etcd/peer.crt, key = /etc/kubernetes/pki/etcd/peer.key, client-cert=, client-key=, trusted-ca = /etc/kubernetes/pki/etcd/ca.crt, client-cert-auth = true, crl-file = ","cipher-suites":[]}
{"level":"info","ts":"2023-01-03T01:13:22.993Z","caller":"embed/etcd.go:139","msg":"configuring client listeners","listen-client-urls":["https://127.0.0.1:2379","https://172.18.0.2:2379"]}
{"level":"info","ts":"2023-01-03T01:13:22.994Z","caller":"embed/etcd.go:308","msg":"starting an etcd server","etcd-version":"3.5.4","git-sha":"08407ff76","go-version":"go1.16.15","go-os":"linux","go-arch":"amd64","max-cpu-set":4,"max-cpu-available":4,"member-initialized":false,"name":"kind-control-plane","data-dir":"/var/lib/etcd","wal-dir":"","wal-dir-dedicated":"","member-dir":"/var/lib/etcd/member","force-new-cluster":false,"heartbeat-interval":"100ms","election-timeout":"1s","initial-election-tick-advance":true,"snapshot-count":10000,"snapshot-catchup-entries":5000,"initial-advertise-peer-urls":["https://172.18.0.2:2380"],"listen-peer-urls":["https://172.18.0.2:2380"],"advertise-client-urls":["https://172.18.0.2:2379"],"listen-client-urls":["https://127.0.0.1:2379","https://172.18.0.2:2379"],"listen-metrics-urls":["http://127.0.0.1:2381"],"cors":["*"],"host-whitelist":["*"],"initial-cluster":"kind-control-plane=https://172.18.0.2:2380","initial-cluster-state":"new","initial-cluster-token":"etcd-cluster","quota-size-bytes":2147483648,"pre-vote":true,"initial-corrupt-check":true,"corrupt-check-time-interval":"0s","auto-compaction-mode":"periodic","auto-compaction-retention":"0s","auto-compaction-interval":"0s","discovery-url":"","discovery-proxy":"","downgrade-check-interval":"5s"}
{"level":"info","ts":"2023-01-03T01:13:23.003Z","caller":"etcdserver/backend.go:81","msg":"opened backend db","path":"/var/lib/etcd/member/snap/db","took":"7.850634ms"}
{"level":"info","ts":"2023-01-03T01:13:23.067Z","caller":"etcdserver/raft.go:448","msg":"starting local member","local-member-id":"e58c878e0e01014","cluster-id":"c74448475845f0fb"}
{"level":"info","ts":"2023-01-03T01:13:23.068Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 switched to configuration voters=()"}
{"level":"info","ts":"2023-01-03T01:13:23.068Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 became follower at term 0"}
{"level":"info","ts":"2023-01-03T01:13:23.068Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"newRaft e58c878e0e01014 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]"}
{"level":"info","ts":"2023-01-03T01:13:23.068Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 became follower at term 1"}
{"level":"info","ts":"2023-01-03T01:13:23.069Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 switched to configuration voters=(1033796535975940116)"}
{"level":"warn","ts":"2023-01-03T01:13:23.080Z","caller":"auth/store.go:1220","msg":"simple token is not cryptographically signed"}
{"level":"info","ts":"2023-01-03T01:13:23.085Z","caller":"mvcc/kvstore.go:415","msg":"kvstore restored","current-rev":1}
{"level":"info","ts":"2023-01-03T01:13:23.091Z","caller":"etcdserver/quota.go:94","msg":"enabled backend quota with default value","quota-name":"v3-applier","quota-size-bytes":2147483648,"quota-size":"2.1 GB"}
{"level":"info","ts":"2023-01-03T01:13:23.099Z","caller":"etcdserver/server.go:851","msg":"starting etcd server","local-member-id":"e58c878e0e01014","local-server-version":"3.5.4","cluster-version":"to_be_decided"}
{"level":"info","ts":"2023-01-03T01:13:23.109Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 switched to configuration voters=(1033796535975940116)"}
{"level":"info","ts":"2023-01-03T01:13:23.109Z","caller":"membership/cluster.go:421","msg":"added member","cluster-id":"c74448475845f0fb","local-member-id":"e58c878e0e01014","added-peer-id":"e58c878e0e01014","added-peer-peer-urls":["https://172.18.0.2:2380"]}
{"level":"info","ts":"2023-01-03T01:13:23.101Z","caller":"etcdserver/server.go:736","msg":"started as single-node; fast-forwarding election ticks","local-member-id":"e58c878e0e01014","forward-ticks":9,"forward-duration":"900ms","election-ticks":10,"election-timeout":"1s"}
{"level":"info","ts":"2023-01-03T01:13:23.123Z","caller":"embed/etcd.go:688","msg":"starting with client TLS","tls-info":"cert = /etc/kubernetes/pki/etcd/server.crt, key = /etc/kubernetes/pki/etcd/server.key, client-cert=, client-key=, trusted-ca = /etc/kubernetes/pki/etcd/ca.crt, client-cert-auth = true, crl-file = ","cipher-suites":[]}
{"level":"info","ts":"2023-01-03T01:13:23.124Z","caller":"embed/etcd.go:277","msg":"now serving peer/client/metrics","local-member-id":"e58c878e0e01014","initial-advertise-peer-urls":["https://172.18.0.2:2380"],"listen-peer-urls":["https://172.18.0.2:2380"],"advertise-client-urls":["https://172.18.0.2:2379"],"listen-client-urls":["https://127.0.0.1:2379","https://172.18.0.2:2379"],"listen-metrics-urls":["http://127.0.0.1:2381"]}
{"level":"info","ts":"2023-01-03T01:13:23.124Z","caller":"embed/etcd.go:763","msg":"serving metrics","address":"http://127.0.0.1:2381"}
{"level":"info","ts":"2023-01-03T01:13:23.125Z","caller":"embed/etcd.go:581","msg":"serving peer traffic","address":"172.18.0.2:2380"}
{"level":"info","ts":"2023-01-03T01:13:23.126Z","caller":"embed/etcd.go:553","msg":"cmux::serve","address":"172.18.0.2:2380"}
{"level":"info","ts":"2023-01-03T01:13:23.373Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 is starting a new election at term 1"}
{"level":"info","ts":"2023-01-03T01:13:23.373Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 became pre-candidate at term 1"}
{"level":"info","ts":"2023-01-03T01:13:23.373Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 received MsgPreVoteResp from e58c878e0e01014 at term 1"}
{"level":"info","ts":"2023-01-03T01:13:23.374Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 became candidate at term 2"}
{"level":"info","ts":"2023-01-03T01:13:23.374Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 received MsgVoteResp from e58c878e0e01014 at term 2"}
{"level":"info","ts":"2023-01-03T01:13:23.374Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"e58c878e0e01014 became leader at term 2"}
{"level":"info","ts":"2023-01-03T01:13:23.374Z","logger":"raft","caller":"etcdserver/zap_raft.go:77","msg":"raft.node: e58c878e0e01014 elected leader e58c878e0e01014 at term 2"}
{"level":"info","ts":"2023-01-03T01:13:23.375Z","caller":"etcdserver/server.go:2507","msg":"setting up initial cluster version using v2 API","cluster-version":"3.5"}
{"level":"info","ts":"2023-01-03T01:13:23.516Z","caller":"membership/cluster.go:584","msg":"set initial cluster version","cluster-id":"c74448475845f0fb","local-member-id":"e58c878e0e01014","cluster-version":"3.5"}
{"level":"info","ts":"2023-01-03T01:13:23.516Z","caller":"embed/serve.go:98","msg":"ready to serve client requests"}
{"level":"info","ts":"2023-01-03T01:13:23.516Z","caller":"embed/serve.go:98","msg":"ready to serve client requests"}
{"level":"info","ts":"2023-01-03T01:13:23.517Z","caller":"api/capability.go:75","msg":"enabled capabilities for version","cluster-version":"3.5"}
{"level":"info","ts":"2023-01-03T01:13:23.518Z","caller":"etcdserver/server.go:2531","msg":"cluster version is updated","cluster-version":"3.5"}
{"level":"info","ts":"2023-01-03T01:13:23.520Z","caller":"etcdmain/main.go:44","msg":"notifying init daemon"}
{"level":"info","ts":"2023-01-03T01:13:23.520Z","caller":"etcdmain/main.go:50","msg":"successfully notified init daemon"}
{"level":"info","ts":"2023-01-03T01:13:23.523Z","caller":"embed/serve.go:188","msg":"serving client traffic securely","address":"172.18.0.2:2379"}
{"level":"info","ts":"2023-01-03T01:13:23.525Z","caller":"embed/serve.go:188","msg":"serving client traffic securely","address":"127.0.0.1:2379"}
{"level":"info","ts":"2023-01-03T01:13:23.516Z","caller":"etcdserver/server.go:2042","msg":"published local member to cluster through raft","local-member-id":"e58c878e0e01014","local-member-attributes":"{Name:kind-control-plane ClientURLs:[https://172.18.0.2:2379]}","request-path":"/0/members/e58c878e0e01014/attributes","cluster-id":"c74448475845f0fb","publish-timeout":"7s"}
{"level":"info","ts":"2023-01-03T01:14:00.217Z","caller":"traceutil/trace.go:171","msg":"trace[681541513] transaction","detail":"{read_only:false; response_revision:451; number_of_response:1; }","duration":"179.17413ms","start":"2023-01-03T01:14:00.038Z","end":"2023-01-03T01:14:00.217Z","steps":["trace[681541513] 'process raft request'  (duration: 179.132817ms)"],"step_count":1}
{"level":"info","ts":"2023-01-03T01:14:00.218Z","caller":"traceutil/trace.go:171","msg":"trace[1576243008] transaction","detail":"{read_only:false; response_revision:450; number_of_response:1; }","duration":"184.837199ms","start":"2023-01-03T01:14:00.033Z","end":"2023-01-03T01:14:00.218Z","steps":["trace[1576243008] 'process raft request'  (duration: 184.404834ms)"],"step_count":1}
{"level":"info","ts":"2023-01-03T01:14:00.218Z","caller":"traceutil/trace.go:171","msg":"trace[1559217413] transaction","detail":"{read_only:false; response_revision:449; number_of_response:1; }","duration":"186.75345ms","start":"2023-01-03T01:14:00.031Z","end":"2023-01-03T01:14:00.218Z","steps":["trace[1559217413] 'process raft request'  (duration: 183.346066ms)"],"step_count":1}
==== END logs for container etcd of pod kube-system/etcd-kind-control-plane ====
==== START logs for container kindnet-cni of pod kube-system/kindnet-p9kz7 ====
I0103 01:13:51.155431       1 main.go:316] probe TCP address kind-control-plane:6443
I0103 01:13:51.249637       1 main.go:102] connected to apiserver: https://kind-control-plane:6443
I0103 01:13:51.249705       1 main.go:107] hostIP = 172.18.0.2
podIP = 172.18.0.2
I0103 01:13:51.249967       1 main.go:116] setting mtu 1500 for CNI 
I0103 01:13:51.250030       1 main.go:146] kindnetd IP family: "ipv4"
I0103 01:13:51.250099       1 main.go:150] noMask IPv4 subnets: [10.244.0.0/16]
I0103 01:13:52.150426       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:13:52.150577       1 main.go:227] handling current node
I0103 01:14:02.362198       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:14:02.362429       1 main.go:227] handling current node
I0103 01:14:12.372675       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:14:12.372751       1 main.go:227] handling current node
I0103 01:14:22.378101       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:14:22.378181       1 main.go:227] handling current node
I0103 01:14:32.395339       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:14:32.396397       1 main.go:227] handling current node
I0103 01:14:42.404207       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:14:42.404367       1 main.go:227] handling current node
I0103 01:14:52.420123       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:14:52.420271       1 main.go:227] handling current node
I0103 01:15:02.431909       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:15:02.431941       1 main.go:227] handling current node
I0103 01:15:12.444590       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:15:12.444778       1 main.go:227] handling current node
I0103 01:15:22.451827       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:15:22.451924       1 main.go:227] handling current node
I0103 01:15:32.465536       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:15:32.465628       1 main.go:227] handling current node
I0103 01:15:42.472432       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:15:42.472838       1 main.go:227] handling current node
I0103 01:15:52.544314       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:15:52.544438       1 main.go:227] handling current node
I0103 01:16:02.553416       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:16:02.553503       1 main.go:227] handling current node
I0103 01:16:12.568304       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:16:12.568499       1 main.go:227] handling current node
I0103 01:16:22.576164       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:16:22.576276       1 main.go:227] handling current node
I0103 01:16:32.585686       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:16:32.585790       1 main.go:227] handling current node
I0103 01:16:42.594227       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:16:42.594336       1 main.go:227] handling current node
I0103 01:16:52.603059       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:16:52.603169       1 main.go:227] handling current node
I0103 01:17:02.617014       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:17:02.617346       1 main.go:227] handling current node
I0103 01:17:12.631528       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:17:12.631608       1 main.go:227] handling current node
I0103 01:17:22.639305       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:17:22.639541       1 main.go:227] handling current node
I0103 01:17:32.648530       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:17:32.648687       1 main.go:227] handling current node
I0103 01:17:42.654805       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:17:42.654897       1 main.go:227] handling current node
I0103 01:17:52.661594       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:17:52.661684       1 main.go:227] handling current node
I0103 01:18:02.667804       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:18:02.667886       1 main.go:227] handling current node
I0103 01:18:12.682950       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:18:12.683067       1 main.go:227] handling current node
I0103 01:18:22.697820       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:18:22.697911       1 main.go:227] handling current node
I0103 01:18:32.704350       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:18:32.704622       1 main.go:227] handling current node
I0103 01:18:42.713857       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:18:42.713991       1 main.go:227] handling current node
I0103 01:18:52.728523       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:18:52.728594       1 main.go:227] handling current node
I0103 01:19:02.739552       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:19:02.740036       1 main.go:227] handling current node
I0103 01:19:12.750327       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:19:12.750421       1 main.go:227] handling current node
I0103 01:19:22.757987       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:19:22.758080       1 main.go:227] handling current node
I0103 01:19:32.770107       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:19:32.770336       1 main.go:227] handling current node
I0103 01:19:42.776408       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:19:42.776497       1 main.go:227] handling current node
I0103 01:19:52.784516       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:19:52.784627       1 main.go:227] handling current node
I0103 01:20:02.797050       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:20:02.797132       1 main.go:227] handling current node
I0103 01:20:12.805040       1 main.go:223] Handling node with IPs: map[172.18.0.2:{}]
I0103 01:20:12.805183       1 main.go:227] handling current node
==== END logs for container kindnet-cni of pod kube-system/kindnet-p9kz7 ====
==== START logs for container kube-apiserver of pod kube-system/kube-apiserver-kind-control-plane ====
I0103 01:13:06.310100       1 server.go:563] external host was not specified, using 172.18.0.2
I0103 01:13:06.313448       1 server.go:161] Version: v1.25.3
I0103 01:13:06.313580       1 server.go:163] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0103 01:13:08.069828       1 shared_informer.go:255] Waiting for caches to sync for node_authorizer
I0103 01:13:08.074615       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0103 01:13:08.075418       1 plugins.go:161] Loaded 11 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0103 01:13:08.083755       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0103 01:13:08.084107       1 plugins.go:161] Loaded 11 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
W0103 01:13:08.114218       1 logging.go:59] [core] [Channel #1 SubChannel #2] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:09.066172       1 logging.go:59] [core] [Channel #5 SubChannel #6] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:09.066302       1 logging.go:59] [core] [Channel #3 SubChannel #4] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:09.115607       1 logging.go:59] [core] [Channel #1 SubChannel #2] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:10.069294       1 logging.go:59] [core] [Channel #3 SubChannel #4] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:10.070368       1 logging.go:59] [core] [Channel #5 SubChannel #6] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:10.946549       1 logging.go:59] [core] [Channel #1 SubChannel #2] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:11.450161       1 logging.go:59] [core] [Channel #5 SubChannel #6] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:11.798527       1 logging.go:59] [core] [Channel #3 SubChannel #4] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:13.820427       1 logging.go:59] [core] [Channel #5 SubChannel #6] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:13.929500       1 logging.go:59] [core] [Channel #1 SubChannel #2] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:14.764534       1 logging.go:59] [core] [Channel #3 SubChannel #4] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:17.601660       1 logging.go:59] [core] [Channel #5 SubChannel #6] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:18.547405       1 logging.go:59] [core] [Channel #1 SubChannel #2] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:19.588171       1 logging.go:59] [core] [Channel #3 SubChannel #4] grpc: addrConn.createTransport failed to connect to {
  "Addr": "127.0.0.1:2379",
  "ServerName": "127.0.0.1",
  "Attributes": null,
  "BalancerAttributes": null,
  "Type": 0,
  "Metadata": null
}. Err: connection error: desc = "transport: Error while dialing dial tcp 127.0.0.1:2379: connect: connection refused"
W0103 01:13:24.670547       1 genericapiserver.go:656] Skipping API apiextensions.k8s.io/v1beta1 because it has no resources.
I0103 01:13:24.673662       1 instance.go:261] Using reconciler: lease
I0103 01:13:25.583208       1 instance.go:574] API group "internal.apiserver.k8s.io" is not enabled, skipping.
W0103 01:13:26.485531       1 genericapiserver.go:656] Skipping API authentication.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.491167       1 genericapiserver.go:656] Skipping API authorization.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.502929       1 genericapiserver.go:656] Skipping API autoscaling/v2beta1 because it has no resources.
W0103 01:13:26.512637       1 genericapiserver.go:656] Skipping API batch/v1beta1 because it has no resources.
W0103 01:13:26.516935       1 genericapiserver.go:656] Skipping API certificates.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.521155       1 genericapiserver.go:656] Skipping API coordination.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.521254       1 genericapiserver.go:656] Skipping API discovery.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.555564       1 genericapiserver.go:656] Skipping API networking.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.555668       1 genericapiserver.go:656] Skipping API networking.k8s.io/v1alpha1 because it has no resources.
W0103 01:13:26.567182       1 genericapiserver.go:656] Skipping API node.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.567235       1 genericapiserver.go:656] Skipping API node.k8s.io/v1alpha1 because it has no resources.
W0103 01:13:26.567671       1 genericapiserver.go:656] Skipping API policy/v1beta1 because it has no resources.
W0103 01:13:26.590710       1 genericapiserver.go:656] Skipping API rbac.authorization.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.590812       1 genericapiserver.go:656] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.
W0103 01:13:26.594285       1 genericapiserver.go:656] Skipping API scheduling.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.594402       1 genericapiserver.go:656] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.
W0103 01:13:26.604236       1 genericapiserver.go:656] Skipping API storage.k8s.io/v1alpha1 because it has no resources.
W0103 01:13:26.611394       1 genericapiserver.go:656] Skipping API flowcontrol.apiserver.k8s.io/v1alpha1 because it has no resources.
W0103 01:13:26.618996       1 genericapiserver.go:656] Skipping API apps/v1beta2 because it has no resources.
W0103 01:13:26.619098       1 genericapiserver.go:656] Skipping API apps/v1beta1 because it has no resources.
W0103 01:13:26.623687       1 genericapiserver.go:656] Skipping API admissionregistration.k8s.io/v1beta1 because it has no resources.
W0103 01:13:26.626624       1 genericapiserver.go:656] Skipping API events.k8s.io/v1beta1 because it has no resources.
I0103 01:13:26.628191       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0103 01:13:26.628317       1 plugins.go:161] Loaded 11 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,PodSecurity,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
W0103 01:13:26.674383       1 genericapiserver.go:656] Skipping API apiregistration.k8s.io/v1beta1 because it has no resources.
I0103 01:13:29.250361       1 dynamic_cafile_content.go:157] "Starting controller" name="request-header::/etc/kubernetes/pki/front-proxy-ca.crt"
I0103 01:13:29.251375       1 secure_serving.go:210] Serving securely on [::]:6443
I0103 01:13:29.251702       1 controller.go:83] Starting OpenAPI AggregationController
I0103 01:13:29.252600       1 apf_controller.go:300] Starting API Priority and Fairness config controller
I0103 01:13:29.252791       1 dynamic_serving_content.go:132] "Starting controller" name="aggregator-proxy-cert::/etc/kubernetes/pki/front-proxy-client.crt::/etc/kubernetes/pki/front-proxy-client.key"
I0103 01:13:29.251798       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
I0103 01:13:29.250395       1 dynamic_serving_content.go:132] "Starting controller" name="serving-cert::/etc/kubernetes/pki/apiserver.crt::/etc/kubernetes/pki/apiserver.key"
I0103 01:13:29.262299       1 apiservice_controller.go:97] Starting APIServiceRegistrationController
I0103 01:13:29.262401       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I0103 01:13:29.263479       1 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller
I0103 01:13:29.263563       1 shared_informer.go:255] Waiting for caches to sync for cluster_authentication_trust_controller
I0103 01:13:29.263594       1 available_controller.go:491] Starting AvailableConditionController
I0103 01:13:29.263602       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I0103 01:13:29.263633       1 controller.go:80] Starting OpenAPI V3 AggregationController
I0103 01:13:29.263846       1 customresource_discovery_controller.go:209] Starting DiscoveryController
I0103 01:13:29.265214       1 autoregister_controller.go:141] Starting autoregister controller
I0103 01:13:29.265367       1 cache.go:32] Waiting for caches to sync for autoregister controller
I0103 01:13:29.267166       1 dynamic_cafile_content.go:157] "Starting controller" name="client-ca-bundle::/etc/kubernetes/pki/ca.crt"
I0103 01:13:29.268069       1 dynamic_cafile_content.go:157] "Starting controller" name="request-header::/etc/kubernetes/pki/front-proxy-ca.crt"
I0103 01:13:29.276386       1 nonstructuralschema_controller.go:192] Starting NonStructuralSchemaConditionController
I0103 01:13:29.277931       1 controller.go:85] Starting OpenAPI controller
I0103 01:13:29.278170       1 controller.go:85] Starting OpenAPI V3 controller
I0103 01:13:29.278371       1 naming_controller.go:291] Starting NamingConditionController
I0103 01:13:29.278710       1 establishing_controller.go:76] Starting EstablishingController
I0103 01:13:29.280681       1 apiapproval_controller.go:186] Starting KubernetesAPIApprovalPolicyConformantConditionController
I0103 01:13:29.280791       1 crd_finalizer.go:266] Starting CRDFinalizer
I0103 01:13:29.280965       1 crdregistration_controller.go:111] Starting crd-autoregister controller
I0103 01:13:29.281249       1 shared_informer.go:255] Waiting for caches to sync for crd-autoregister
I0103 01:13:29.250862       1 dynamic_cafile_content.go:157] "Starting controller" name="client-ca-bundle::/etc/kubernetes/pki/ca.crt"
I0103 01:13:29.383459       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I0103 01:13:29.386163       1 shared_informer.go:262] Caches are synced for cluster_authentication_trust_controller
I0103 01:13:29.386837       1 cache.go:39] Caches are synced for AvailableConditionController controller
I0103 01:13:29.458944       1 apf_controller.go:305] Running API Priority and Fairness config worker
I0103 01:13:29.465486       1 cache.go:39] Caches are synced for autoregister controller
I0103 01:13:29.470013       1 shared_informer.go:262] Caches are synced for node_authorizer
I0103 01:13:29.503276       1 shared_informer.go:262] Caches are synced for crd-autoregister
I0103 01:13:29.511756       1 controller.go:616] quota admission added evaluator for: namespaces
I0103 01:13:29.678721       1 controller.go:132] OpenAPI AggregationController: action for item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).
I0103 01:13:30.259844       1 storage_scheduling.go:95] created PriorityClass system-node-critical with value 2000001000
I0103 01:13:30.267798       1 storage_scheduling.go:95] created PriorityClass system-cluster-critical with value 2000000000
I0103 01:13:30.267957       1 storage_scheduling.go:111] all system priority classes are created successfully or already exist.
I0103 01:13:31.869198       1 controller.go:616] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I0103 01:13:31.987306       1 controller.go:616] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
I0103 01:13:32.167680       1 alloc.go:327] "allocated clusterIPs" service="default/kubernetes" clusterIPs=map[IPv4:10.96.0.1]
W0103 01:13:32.182361       1 lease.go:250] Resetting endpoints for master service "kubernetes" to [172.18.0.2]
I0103 01:13:32.185225       1 controller.go:616] quota admission added evaluator for: endpoints
I0103 01:13:32.205020       1 controller.go:616] quota admission added evaluator for: endpointslices.discovery.k8s.io
I0103 01:13:32.502415       1 controller.go:616] quota admission added evaluator for: leases.coordination.k8s.io
I0103 01:13:32.552299       1 controller.go:616] quota admission added evaluator for: serviceaccounts
I0103 01:13:33.976369       1 controller.go:616] quota admission added evaluator for: deployments.apps
I0103 01:13:34.005435       1 alloc.go:327] "allocated clusterIPs" service="kube-system/kube-dns" clusterIPs=map[IPv4:10.96.0.10]
I0103 01:13:34.027760       1 controller.go:616] quota admission added evaluator for: daemonsets.apps
I0103 01:13:45.930335       1 controller.go:616] quota admission added evaluator for: controllerrevisions.apps
I0103 01:13:46.041104       1 controller.go:616] quota admission added evaluator for: replicasets.apps
==== END logs for container kube-apiserver of pod kube-system/kube-apiserver-kind-control-plane ====
==== START logs for container kube-controller-manager of pod kube-system/kube-controller-manager-kind-control-plane ====
I0103 01:13:07.676722       1 serving.go:348] Generated self-signed cert in-memory
I0103 01:13:10.245688       1 controllermanager.go:178] Version: v1.25.3
I0103 01:13:10.245823       1 controllermanager.go:180] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0103 01:13:10.249216       1 secure_serving.go:210] Serving securely on 127.0.0.1:10257
I0103 01:13:10.249643       1 leaderelection.go:248] attempting to acquire leader lease kube-system/kube-controller-manager...
I0103 01:13:10.250549       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
I0103 01:13:10.250655       1 dynamic_cafile_content.go:157] "Starting controller" name="client-ca-bundle::/etc/kubernetes/pki/ca.crt"
I0103 01:13:10.250549       1 dynamic_cafile_content.go:157] "Starting controller" name="request-header::/etc/kubernetes/pki/front-proxy-ca.crt"
E0103 01:13:15.250701       1 leaderelection.go:330] error retrieving resource lock kube-system/kube-controller-manager: Get "https://172.18.0.2:6443/apis/coordination.k8s.io/v1/namespaces/kube-system/leases/kube-controller-manager?timeout=5s": net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
E0103 01:13:23.557578       1 leaderelection.go:330] error retrieving resource lock kube-system/kube-controller-manager: Get "https://172.18.0.2:6443/apis/coordination.k8s.io/v1/namespaces/kube-system/leases/kube-controller-manager?timeout=5s": net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
E0103 01:13:29.526048       1 leaderelection.go:330] error retrieving resource lock kube-system/kube-controller-manager: leases.coordination.k8s.io "kube-controller-manager" is forbidden: User "system:kube-controller-manager" cannot get resource "leases" in API group "coordination.k8s.io" in the namespace "kube-system"
I0103 01:13:32.506478       1 leaderelection.go:258] successfully acquired lease kube-system/kube-controller-manager
I0103 01:13:32.507185       1 event.go:294] "Event occurred" object="kube-system/kube-controller-manager" fieldPath="" kind="Lease" apiVersion="coordination.k8s.io/v1" type="Normal" reason="LeaderElection" message="kind-control-plane_4279a7ed-9600-41b3-bd6d-82043a37dd72 became leader"
I0103 01:13:32.528585       1 shared_informer.go:255] Waiting for caches to sync for tokens
I0103 01:13:32.559597       1 controllermanager.go:603] Started "csrcleaner"
I0103 01:13:32.559957       1 cleaner.go:82] Starting CSR cleaner controller
E0103 01:13:32.582538       1 core.go:92] Failed to start service controller: WARNING: no cloud provider provided, services of type LoadBalancer will fail
W0103 01:13:32.582666       1 controllermanager.go:581] Skipping "service"
W0103 01:13:32.582698       1 core.go:232] configure-cloud-routes is set, but no cloud provider specified. Will not configure cloud provider routes.
W0103 01:13:32.582712       1 controllermanager.go:581] Skipping "route"
I0103 01:13:32.610829       1 controllermanager.go:603] Started "deployment"
I0103 01:13:32.611217       1 deployment_controller.go:160] "Starting controller" controller="deployment"
I0103 01:13:32.611244       1 shared_informer.go:255] Waiting for caches to sync for deployment
I0103 01:13:32.629639       1 shared_informer.go:262] Caches are synced for tokens
I0103 01:13:32.635707       1 node_lifecycle_controller.go:497] Controller will reconcile labels.
I0103 01:13:32.636054       1 controllermanager.go:603] Started "nodelifecycle"
I0103 01:13:32.636506       1 node_lifecycle_controller.go:532] Sending events to api server.
I0103 01:13:32.636551       1 node_lifecycle_controller.go:543] Starting node controller
I0103 01:13:32.636566       1 shared_informer.go:255] Waiting for caches to sync for taint
E0103 01:13:32.654274       1 core.go:218] failed to start cloud node lifecycle controller: no cloud provider provided
W0103 01:13:32.654388       1 controllermanager.go:581] Skipping "cloud-node-lifecycle"
I0103 01:13:32.672906       1 controllermanager.go:603] Started "clusterrole-aggregation"
I0103 01:13:32.673257       1 clusterroleaggregation_controller.go:194] Starting ClusterRoleAggregator
I0103 01:13:32.673493       1 shared_informer.go:255] Waiting for caches to sync for ClusterRoleAggregator
I0103 01:13:32.693709       1 controllermanager.go:603] Started "ttl-after-finished"
I0103 01:13:32.696836       1 ttlafterfinished_controller.go:109] Starting TTL after finished controller
I0103 01:13:32.697430       1 shared_informer.go:255] Waiting for caches to sync for TTL after finished
I0103 01:13:32.726380       1 controllermanager.go:603] Started "horizontalpodautoscaling"
I0103 01:13:32.726615       1 horizontal.go:168] Starting HPA controller
I0103 01:13:32.727378       1 shared_informer.go:255] Waiting for caches to sync for HPA
I0103 01:13:32.732111       1 certificate_controller.go:112] Starting certificate controller "csrsigning-kubelet-client"
I0103 01:13:32.732198       1 shared_informer.go:255] Waiting for caches to sync for certificate-csrsigning-kubelet-client
I0103 01:13:32.732360       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/etc/kubernetes/pki/ca.crt::/etc/kubernetes/pki/ca.key"
I0103 01:13:32.732713       1 certificate_controller.go:112] Starting certificate controller "csrsigning-kubelet-serving"
I0103 01:13:32.733131       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/etc/kubernetes/pki/ca.crt::/etc/kubernetes/pki/ca.key"
I0103 01:13:32.733296       1 certificate_controller.go:112] Starting certificate controller "csrsigning-legacy-unknown"
I0103 01:13:32.733377       1 shared_informer.go:255] Waiting for caches to sync for certificate-csrsigning-legacy-unknown
I0103 01:13:32.733417       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/etc/kubernetes/pki/ca.crt::/etc/kubernetes/pki/ca.key"
I0103 01:13:32.733179       1 shared_informer.go:255] Waiting for caches to sync for certificate-csrsigning-kubelet-serving
I0103 01:13:32.732846       1 dynamic_serving_content.go:132] "Starting controller" name="csr-controller::/etc/kubernetes/pki/ca.crt::/etc/kubernetes/pki/ca.key"
I0103 01:13:32.732817       1 certificate_controller.go:112] Starting certificate controller "csrsigning-kube-apiserver-client"
I0103 01:13:32.733705       1 shared_informer.go:255] Waiting for caches to sync for certificate-csrsigning-kube-apiserver-client
I0103 01:13:32.733276       1 controllermanager.go:603] Started "csrsigning"
I0103 01:13:32.760874       1 controllermanager.go:603] Started "pvc-protection"
I0103 01:13:32.761122       1 pvc_protection_controller.go:103] "Starting PVC protection controller"
I0103 01:13:32.761143       1 shared_informer.go:255] Waiting for caches to sync for PVC protection
I0103 01:13:32.827422       1 controllermanager.go:603] Started "namespace"
I0103 01:13:32.827906       1 namespace_controller.go:200] Starting namespace controller
I0103 01:13:32.827929       1 shared_informer.go:255] Waiting for caches to sync for namespace
I0103 01:13:33.011906       1 controllermanager.go:603] Started "garbagecollector"
I0103 01:13:33.012278       1 garbagecollector.go:154] Starting garbage collector controller
I0103 01:13:33.015525       1 shared_informer.go:255] Waiting for caches to sync for garbage collector
I0103 01:13:33.015628       1 graph_builder.go:291] GraphBuilder running
I0103 01:13:33.263446       1 controllermanager.go:603] Started "statefulset"
I0103 01:13:33.263627       1 stateful_set.go:152] Starting stateful set controller
I0103 01:13:33.263643       1 shared_informer.go:255] Waiting for caches to sync for stateful set
I0103 01:13:33.414143       1 controllermanager.go:603] Started "ttl"
I0103 01:13:33.414518       1 ttl_controller.go:120] Starting TTL controller
I0103 01:13:33.414813       1 shared_informer.go:255] Waiting for caches to sync for TTL
I0103 01:13:33.566927       1 controllermanager.go:603] Started "attachdetach"
I0103 01:13:33.571199       1 attach_detach_controller.go:328] Starting attach detach controller
I0103 01:13:33.571717       1 shared_informer.go:255] Waiting for caches to sync for attach detach
I0103 01:13:33.723886       1 controllermanager.go:603] Started "endpointslicemirroring"
I0103 01:13:33.724415       1 endpointslicemirroring_controller.go:216] Starting EndpointSliceMirroring controller
I0103 01:13:33.724556       1 shared_informer.go:255] Waiting for caches to sync for endpoint_slice_mirroring
I0103 01:13:33.866401       1 controllermanager.go:603] Started "cronjob"
I0103 01:13:33.867030       1 cronjob_controllerv2.go:135] "Starting cronjob controller v2"
I0103 01:13:33.867250       1 shared_informer.go:255] Waiting for caches to sync for cronjob
I0103 01:13:33.922882       1 controllermanager.go:603] Started "csrapproving"
I0103 01:13:33.923037       1 certificate_controller.go:112] Starting certificate controller "csrapproving"
I0103 01:13:33.923055       1 shared_informer.go:255] Waiting for caches to sync for certificate-csrapproving
I0103 01:13:34.067826       1 controllermanager.go:603] Started "ephemeral-volume"
I0103 01:13:34.068218       1 controller.go:169] Starting ephemeral volume controller
I0103 01:13:34.068385       1 shared_informer.go:255] Waiting for caches to sync for ephemeral
I0103 01:13:34.216538       1 controllermanager.go:603] Started "tokencleaner"
I0103 01:13:34.216755       1 tokencleaner.go:118] Starting token cleaner controller
I0103 01:13:34.217000       1 shared_informer.go:255] Waiting for caches to sync for token_cleaner
I0103 01:13:34.217212       1 shared_informer.go:262] Caches are synced for token_cleaner
I0103 01:13:34.268293       1 node_ipam_controller.go:91] Sending events to api server.
I0103 01:13:44.291120       1 range_allocator.go:76] Sending events to api server.
I0103 01:13:44.291846       1 range_allocator.go:110] No Secondary Service CIDR provided. Skipping filtering out secondary service addresses.
I0103 01:13:44.292038       1 controllermanager.go:603] Started "nodeipam"
I0103 01:13:44.292289       1 node_ipam_controller.go:154] Starting ipam controller
I0103 01:13:44.292367       1 shared_informer.go:255] Waiting for caches to sync for node
I0103 01:13:44.307059       1 controllermanager.go:603] Started "endpoint"
I0103 01:13:44.307433       1 endpoints_controller.go:182] Starting endpoint controller
I0103 01:13:44.307467       1 shared_informer.go:255] Waiting for caches to sync for endpoint
I0103 01:13:44.328500       1 controllermanager.go:603] Started "endpointslice"
I0103 01:13:44.328665       1 endpointslice_controller.go:261] Starting endpoint slice controller
I0103 01:13:44.328683       1 shared_informer.go:255] Waiting for caches to sync for endpoint_slice
I0103 01:13:44.344970       1 controllermanager.go:603] Started "podgc"
I0103 01:13:44.345186       1 gc_controller.go:99] Starting GC controller
I0103 01:13:44.345198       1 shared_informer.go:255] Waiting for caches to sync for GC
I0103 01:13:44.363365       1 controllermanager.go:603] Started "disruption"
I0103 01:13:44.363850       1 disruption.go:421] Sending events to api server.
I0103 01:13:44.363982       1 disruption.go:432] Starting disruption controller
I0103 01:13:44.363995       1 shared_informer.go:255] Waiting for caches to sync for disruption
I0103 01:13:44.379395       1 controllermanager.go:603] Started "bootstrapsigner"
I0103 01:13:44.381260       1 shared_informer.go:255] Waiting for caches to sync for bootstrap_signer
I0103 01:13:44.401462       1 controllermanager.go:603] Started "job"
I0103 01:13:44.401673       1 job_controller.go:196] Starting job controller
I0103 01:13:44.402373       1 shared_informer.go:255] Waiting for caches to sync for job
I0103 01:13:44.416676       1 controllermanager.go:603] Started "persistentvolume-binder"
I0103 01:13:44.417348       1 pv_controller_base.go:318] Starting persistent volume controller
I0103 01:13:44.417436       1 shared_informer.go:255] Waiting for caches to sync for persistent volume
I0103 01:13:44.439132       1 controllermanager.go:603] Started "root-ca-cert-publisher"
I0103 01:13:44.439510       1 publisher.go:107] Starting root CA certificate configmap publisher
I0103 01:13:44.439545       1 shared_informer.go:255] Waiting for caches to sync for crt configmap
I0103 01:13:44.462408       1 controllermanager.go:603] Started "persistentvolume-expander"
I0103 01:13:44.462447       1 expand_controller.go:340] Starting expand controller
I0103 01:13:44.465743       1 shared_informer.go:255] Waiting for caches to sync for expand
I0103 01:13:44.480510       1 controllermanager.go:603] Started "pv-protection"
I0103 01:13:44.481030       1 pv_protection_controller.go:79] Starting PV protection controller
I0103 01:13:44.481245       1 shared_informer.go:255] Waiting for caches to sync for PV protection
I0103 01:13:44.576032       1 controllermanager.go:603] Started "replicationcontroller"
I0103 01:13:44.576407       1 replica_set.go:205] Starting replicationcontroller controller
I0103 01:13:44.576433       1 shared_informer.go:255] Waiting for caches to sync for ReplicationController
W0103 01:13:44.892644       1 shared_informer.go:533] resyncPeriod 14h41m11.464110384s is smaller than resyncCheckPeriod 21h32m20.470508018s and the informer has already started. Changing it to 21h32m20.470508018s
I0103 01:13:44.892887       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for deployments.apps
I0103 01:13:44.893019       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for networkpolicies.networking.k8s.io
I0103 01:13:44.893130       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for poddisruptionbudgets.policy
I0103 01:13:44.893172       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for daemonsets.apps
I0103 01:13:44.893217       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for roles.rbac.authorization.k8s.io
W0103 01:13:44.893263       1 shared_informer.go:533] resyncPeriod 13h34m45.583287973s is smaller than resyncCheckPeriod 21h32m20.470508018s and the informer has already started. Changing it to 21h32m20.470508018s
I0103 01:13:44.893369       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for serviceaccounts
I0103 01:13:44.893502       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for statefulsets.apps
I0103 01:13:44.893814       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for limitranges
I0103 01:13:44.893914       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for replicasets.apps
I0103 01:13:44.893950       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for ingresses.networking.k8s.io
I0103 01:13:44.894033       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for podtemplates
I0103 01:13:44.894077       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for endpointslices.discovery.k8s.io
I0103 01:13:44.894121       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for horizontalpodautoscalers.autoscaling
I0103 01:13:44.894154       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for csistoragecapacities.storage.k8s.io
I0103 01:13:44.895352       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for endpoints
I0103 01:13:44.899051       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for jobs.batch
I0103 01:13:44.899167       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for leases.coordination.k8s.io
I0103 01:13:44.899213       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for cronjobs.batch
I0103 01:13:44.899242       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for controllerrevisions.apps
I0103 01:13:44.899419       1 resource_quota_monitor.go:218] QuotaMonitor created object count evaluator for rolebindings.rbac.authorization.k8s.io
I0103 01:13:44.899566       1 controllermanager.go:603] Started "resourcequota"
I0103 01:13:44.900307       1 resource_quota_controller.go:277] Starting resource quota controller
I0103 01:13:44.900397       1 shared_informer.go:255] Waiting for caches to sync for resource quota
I0103 01:13:44.900440       1 resource_quota_monitor.go:295] QuotaMonitor running
I0103 01:13:45.023769       1 controllermanager.go:603] Started "serviceaccount"
I0103 01:13:45.024198       1 serviceaccounts_controller.go:117] Starting service account controller
I0103 01:13:45.024220       1 shared_informer.go:255] Waiting for caches to sync for service account
I0103 01:13:45.175068       1 controllermanager.go:603] Started "daemonset"
I0103 01:13:45.175907       1 daemon_controller.go:291] Starting daemon sets controller
I0103 01:13:45.175926       1 shared_informer.go:255] Waiting for caches to sync for daemon sets
I0103 01:13:45.325080       1 controllermanager.go:603] Started "replicaset"
I0103 01:13:45.325214       1 replica_set.go:205] Starting replicaset controller
I0103 01:13:45.325231       1 shared_informer.go:255] Waiting for caches to sync for ReplicaSet
I0103 01:13:45.335404       1 shared_informer.go:255] Waiting for caches to sync for resource quota
W0103 01:13:45.353493       1 actual_state_of_world.go:541] Failed to update statusUpdateNeeded field in actual state of world: Failed to set statusUpdateNeeded to needed true, because nodeName="kind-control-plane" does not exist
I0103 01:13:45.364491       1 shared_informer.go:262] Caches are synced for disruption
I0103 01:13:45.366015       1 shared_informer.go:262] Caches are synced for expand
I0103 01:13:45.367892       1 shared_informer.go:262] Caches are synced for cronjob
I0103 01:13:45.369173       1 shared_informer.go:262] Caches are synced for ephemeral
I0103 01:13:45.373148       1 shared_informer.go:255] Waiting for caches to sync for garbage collector
I0103 01:13:45.374388       1 shared_informer.go:262] Caches are synced for ClusterRoleAggregator
I0103 01:13:45.376411       1 shared_informer.go:262] Caches are synced for daemon sets
I0103 01:13:45.376489       1 shared_informer.go:262] Caches are synced for ReplicationController
I0103 01:13:45.381854       1 shared_informer.go:262] Caches are synced for bootstrap_signer
I0103 01:13:45.381866       1 shared_informer.go:262] Caches are synced for PV protection
I0103 01:13:45.393576       1 shared_informer.go:262] Caches are synced for node
I0103 01:13:45.394029       1 range_allocator.go:166] Starting range CIDR allocator
I0103 01:13:45.394055       1 shared_informer.go:255] Waiting for caches to sync for cidrallocator
I0103 01:13:45.394077       1 shared_informer.go:262] Caches are synced for cidrallocator
I0103 01:13:45.397995       1 shared_informer.go:262] Caches are synced for TTL after finished
I0103 01:13:45.406205       1 shared_informer.go:262] Caches are synced for job
I0103 01:13:45.406529       1 range_allocator.go:367] Set node kind-control-plane PodCIDR to [10.244.0.0/24]
I0103 01:13:45.408652       1 shared_informer.go:262] Caches are synced for endpoint
I0103 01:13:45.411430       1 shared_informer.go:262] Caches are synced for deployment
I0103 01:13:45.415283       1 shared_informer.go:262] Caches are synced for TTL
I0103 01:13:45.417549       1 shared_informer.go:262] Caches are synced for persistent volume
I0103 01:13:45.423225       1 shared_informer.go:262] Caches are synced for certificate-csrapproving
I0103 01:13:45.424873       1 shared_informer.go:262] Caches are synced for service account
I0103 01:13:45.425301       1 shared_informer.go:262] Caches are synced for ReplicaSet
I0103 01:13:45.425485       1 shared_informer.go:262] Caches are synced for endpoint_slice_mirroring
I0103 01:13:45.427873       1 shared_informer.go:262] Caches are synced for HPA
I0103 01:13:45.428148       1 shared_informer.go:262] Caches are synced for namespace
I0103 01:13:45.428841       1 shared_informer.go:262] Caches are synced for endpoint_slice
I0103 01:13:45.433346       1 shared_informer.go:262] Caches are synced for certificate-csrsigning-kubelet-client
I0103 01:13:45.433637       1 shared_informer.go:262] Caches are synced for certificate-csrsigning-kubelet-serving
I0103 01:13:45.438086       1 shared_informer.go:262] Caches are synced for taint
I0103 01:13:45.433814       1 shared_informer.go:262] Caches are synced for certificate-csrsigning-kube-apiserver-client
I0103 01:13:45.433843       1 shared_informer.go:262] Caches are synced for certificate-csrsigning-legacy-unknown
I0103 01:13:45.438819       1 node_lifecycle_controller.go:1443] Initializing eviction metric for zone: 
I0103 01:13:45.439530       1 event.go:294] "Event occurred" object="kind-control-plane" fieldPath="" kind="Node" apiVersion="v1" type="Normal" reason="RegisteredNode" message="Node kind-control-plane event: Registered Node kind-control-plane in Controller"
I0103 01:13:45.439199       1 taint_manager.go:204] "Starting NoExecuteTaintManager"
I0103 01:13:45.439823       1 taint_manager.go:209] "Sending events to api server"
W0103 01:13:45.440332       1 node_lifecycle_controller.go:1058] Missing timestamp for Node kind-control-plane. Assuming now as a timestamp.
I0103 01:13:45.440490       1 node_lifecycle_controller.go:1209] Controller detected that all Nodes are not-Ready. Entering master disruption mode.
I0103 01:13:45.440989       1 shared_informer.go:262] Caches are synced for crt configmap
I0103 01:13:45.446372       1 shared_informer.go:262] Caches are synced for GC
I0103 01:13:45.462698       1 shared_informer.go:262] Caches are synced for PVC protection
I0103 01:13:45.464413       1 shared_informer.go:262] Caches are synced for stateful set
I0103 01:13:45.536081       1 shared_informer.go:262] Caches are synced for resource quota
I0103 01:13:45.573081       1 shared_informer.go:262] Caches are synced for attach detach
I0103 01:13:45.601323       1 shared_informer.go:262] Caches are synced for resource quota
I0103 01:13:45.947300       1 event.go:294] "Event occurred" object="kube-system/kube-proxy" fieldPath="" kind="DaemonSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: kube-proxy-gvsl4"
I0103 01:13:45.956700       1 event.go:294] "Event occurred" object="kube-system/kindnet" fieldPath="" kind="DaemonSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: kindnet-p9kz7"
I0103 01:13:45.985870       1 shared_informer.go:262] Caches are synced for garbage collector
I0103 01:13:46.016830       1 shared_informer.go:262] Caches are synced for garbage collector
I0103 01:13:46.017079       1 garbagecollector.go:163] Garbage collector: all resource monitors have synced. Proceeding to collect garbage
I0103 01:13:46.048391       1 event.go:294] "Event occurred" object="local-path-storage/local-path-provisioner" fieldPath="" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set local-path-provisioner-684f458cdd to 1"
I0103 01:13:46.048524       1 event.go:294] "Event occurred" object="kube-system/coredns" fieldPath="" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set coredns-565d847f94 to 2"
I0103 01:13:46.345095       1 event.go:294] "Event occurred" object="local-path-storage/local-path-provisioner-684f458cdd" fieldPath="" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: local-path-provisioner-684f458cdd-htc4c"
I0103 01:13:46.363296       1 event.go:294] "Event occurred" object="kube-system/coredns-565d847f94" fieldPath="" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-565d847f94-6kvg7"
I0103 01:13:46.384449       1 event.go:294] "Event occurred" object="kube-system/coredns-565d847f94" fieldPath="" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-565d847f94-x6nhp"
I0103 01:13:55.442099       1 node_lifecycle_controller.go:1236] Controller detected that some Nodes are Ready. Exiting master disruption mode.
==== END logs for container kube-controller-manager of pod kube-system/kube-controller-manager-kind-control-plane ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-gvsl4 ====
I0103 01:13:48.698261       1 node.go:163] Successfully retrieved node IP: 172.18.0.2
I0103 01:13:48.698721       1 server_others.go:138] "Detected node IP" address="172.18.0.2"
I0103 01:13:48.801703       1 server_others.go:206] "Using iptables Proxier"
I0103 01:13:48.801882       1 server_others.go:213] "kube-proxy running in dual-stack mode" ipFamily=IPv4
I0103 01:13:48.801900       1 server_others.go:214] "Creating dualStackProxier for iptables"
I0103 01:13:48.801921       1 server_others.go:501] "Detect-local-mode set to ClusterCIDR, but no IPv6 cluster CIDR defined, , defaulting to no-op detect-local for IPv6"
I0103 01:13:48.801964       1 proxier.go:262] "Setting route_localnet=1, use nodePortAddresses to filter loopback addresses for NodePorts to skip it https://issues.k8s.io/90259"
I0103 01:13:48.802137       1 proxier.go:262] "Setting route_localnet=1, use nodePortAddresses to filter loopback addresses for NodePorts to skip it https://issues.k8s.io/90259"
I0103 01:13:48.802476       1 server.go:661] "Version info" version="v1.25.3"
I0103 01:13:48.802501       1 server.go:663] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0103 01:13:48.803267       1 conntrack.go:100] "Set sysctl" entry="net/netfilter/nf_conntrack_tcp_timeout_close_wait" value=3600
I0103 01:13:48.805515       1 config.go:317] "Starting service config controller"
I0103 01:13:48.805603       1 shared_informer.go:255] Waiting for caches to sync for service config
I0103 01:13:48.805639       1 config.go:226] "Starting endpoint slice config controller"
I0103 01:13:48.805646       1 shared_informer.go:255] Waiting for caches to sync for endpoint slice config
I0103 01:13:48.806545       1 config.go:444] "Starting node config controller"
I0103 01:13:48.806639       1 shared_informer.go:255] Waiting for caches to sync for node config
I0103 01:13:48.905826       1 shared_informer.go:262] Caches are synced for endpoint slice config
I0103 01:13:48.905977       1 shared_informer.go:262] Caches are synced for service config
I0103 01:13:48.906943       1 shared_informer.go:262] Caches are synced for node config
==== END logs for container kube-proxy of pod kube-system/kube-proxy-gvsl4 ====
==== START logs for container kube-scheduler of pod kube-system/kube-scheduler-kind-control-plane ====
I0103 01:13:07.988731       1 serving.go:348] Generated self-signed cert in-memory
W0103 01:13:21.511191       1 authentication.go:346] Error looking up in-cluster authentication configuration: Get "https://172.18.0.2:6443/api/v1/namespaces/kube-system/configmaps/extension-apiserver-authentication": net/http: TLS handshake timeout
W0103 01:13:21.511328       1 authentication.go:347] Continuing without authentication configuration. This may treat all requests as anonymous.
W0103 01:13:21.511350       1 authentication.go:348] To require authentication configuration lookup to succeed, set --authentication-tolerate-lookup-failure=false
I0103 01:13:29.430308       1 server.go:148] "Starting Kubernetes Scheduler" version="v1.25.3"
I0103 01:13:29.430380       1 server.go:150] "Golang settings" GOGC="" GOMAXPROCS="" GOTRACEBACK=""
I0103 01:13:29.434106       1 secure_serving.go:210] Serving securely on 127.0.0.1:10259
I0103 01:13:29.434764       1 configmap_cafile_content.go:202] "Starting controller" name="client-ca::kube-system::extension-apiserver-authentication::client-ca-file"
I0103 01:13:29.434794       1 shared_informer.go:255] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0103 01:13:29.434957       1 tlsconfig.go:240] "Starting DynamicServingCertificateController"
W0103 01:13:29.509261       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:29.510157       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
W0103 01:13:29.510905       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0103 01:13:29.511199       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
W0103 01:13:29.511859       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0103 01:13:29.512132       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
W0103 01:13:29.513113       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0103 01:13:29.513556       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
W0103 01:13:29.513708       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0103 01:13:29.513739       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
W0103 01:13:29.514964       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0103 01:13:29.515441       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
W0103 01:13:29.516108       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:29.516232       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSIDriver: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
W0103 01:13:29.518741       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0103 01:13:29.519113       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
W0103 01:13:29.519050       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
E0103 01:13:29.519282       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Namespace: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
W0103 01:13:29.519448       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:29.519743       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSIStorageCapacity: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
W0103 01:13:29.520022       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0103 01:13:29.520525       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
W0103 01:13:29.520360       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:29.521222       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
W0103 01:13:29.521653       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0103 01:13:29.522008       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PodDisruptionBudget: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
W0103 01:13:29.522906       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E0103 01:13:29.523341       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
W0103 01:13:29.531589       1 reflector.go:424] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0103 01:13:29.531749       1 reflector.go:140] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
W0103 01:13:30.325243       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0103 01:13:30.325292       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
W0103 01:13:30.616163       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0103 01:13:30.616485       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
W0103 01:13:30.652277       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:30.652418       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
W0103 01:13:30.655686       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0103 01:13:30.656182       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
W0103 01:13:30.706138       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:30.706419       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
W0103 01:13:30.742421       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0103 01:13:30.742566       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
W0103 01:13:30.831232       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0103 01:13:30.831368       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
W0103 01:13:30.834449       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
E0103 01:13:30.834588       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Namespace: failed to list *v1.Namespace: namespaces is forbidden: User "system:kube-scheduler" cannot list resource "namespaces" in API group "" at the cluster scope
W0103 01:13:30.871553       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0103 01:13:30.871659       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
W0103 01:13:30.930351       1 reflector.go:424] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0103 01:13:30.930440       1 reflector.go:140] pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
W0103 01:13:30.973991       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0103 01:13:30.974141       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PodDisruptionBudget: failed to list *v1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
W0103 01:13:30.983983       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:30.984109       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSIStorageCapacity: failed to list *v1.CSIStorageCapacity: csistoragecapacities.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csistoragecapacities" in API group "storage.k8s.io" at the cluster scope
W0103 01:13:31.104112       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0103 01:13:31.104249       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
W0103 01:13:31.109295       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E0103 01:13:31.109347       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
W0103 01:13:31.116642       1 reflector.go:424] vendor/k8s.io/client-go/informers/factory.go:134: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
E0103 01:13:31.116844       1 reflector.go:140] vendor/k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSIDriver: failed to list *v1.CSIDriver: csidrivers.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csidrivers" in API group "storage.k8s.io" at the cluster scope
I0103 01:13:32.637288       1 shared_informer.go:262] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0103 01:13:34.055455       1 leaderelection.go:248] attempting to acquire leader lease kube-system/kube-scheduler...
I0103 01:13:34.072854       1 leaderelection.go:258] successfully acquired lease kube-system/kube-scheduler
==== END logs for container kube-scheduler of pod kube-system/kube-scheduler-kind-control-plane ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "902"
    },
    "items": [
        {
            "metadata": {
                "name": "kind-control-plane.1736a767bc13522e",
                "namespace": "default",
                "uid": "52c8616c-e599-4bbd-b2bf-0b6f1ead5542",
                "resourceVersion": "236",
                "creationTimestamp": "2023-01-03T01:13:32Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node kind-control-plane status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:12:55Z",
            "lastTimestamp": "2023-01-03T01:12:56Z",
            "count": 6,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a767bc138eac",
                "namespace": "default",
                "uid": "30e511ce-545a-4db7-ab74-0a09c74272b2",
                "resourceVersion": "221",
                "creationTimestamp": "2023-01-03T01:13:32Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node kind-control-plane status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:12:55Z",
            "lastTimestamp": "2023-01-03T01:12:56Z",
            "count": 5,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a767bc13bd93",
                "namespace": "default",
                "uid": "4b1e8ed1-7c80-434b-986d-6570cd3e3b9e",
                "resourceVersion": "233",
                "creationTimestamp": "2023-01-03T01:13:32Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node kind-control-plane status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:12:55Z",
            "lastTimestamp": "2023-01-03T01:12:56Z",
            "count": 5,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a770b85b3450",
                "namespace": "default",
                "uid": "c2a9d884-3a9d-4ce2-8267-22c3263d016e",
                "resourceVersion": "256",
                "creationTimestamp": "2023-01-03T01:13:34Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "Starting",
            "message": "Starting kubelet.",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:34Z",
            "lastTimestamp": "2023-01-03T01:13:34Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a770c04d8886",
                "namespace": "default",
                "uid": "94e69593-e3d1-412d-b3f2-5728fedf05bb",
                "resourceVersion": "258",
                "creationTimestamp": "2023-01-03T01:13:34Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node kind-control-plane status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:34Z",
            "lastTimestamp": "2023-01-03T01:13:34Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a770c04dc289",
                "namespace": "default",
                "uid": "63749a39-321e-4537-8f5d-88f706a2cdca",
                "resourceVersion": "259",
                "creationTimestamp": "2023-01-03T01:13:34Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node kind-control-plane status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:34Z",
            "lastTimestamp": "2023-01-03T01:13:34Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a770c04ddbdb",
                "namespace": "default",
                "uid": "ae730000-638d-4fd1-b13b-d885fc6c79d1",
                "resourceVersion": "260",
                "creationTimestamp": "2023-01-03T01:13:34Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node kind-control-plane status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:34Z",
            "lastTimestamp": "2023-01-03T01:13:34Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a770d14b3065",
                "namespace": "default",
                "uid": "ebccc8bb-4f0d-4d0f-824f-2eaa6510063f",
                "resourceVersion": "263",
                "creationTimestamp": "2023-01-03T01:13:34Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeAllocatableEnforced",
            "message": "Updated Node Allocatable limit across pods",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:34Z",
            "lastTimestamp": "2023-01-03T01:13:34Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a77357137cf9",
                "namespace": "default",
                "uid": "1f6b5e64-2c84-4799-a8ad-a7663b1e1704",
                "resourceVersion": "322",
                "creationTimestamp": "2023-01-03T01:13:45Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "73a32146-7ef8-494f-866c-bcc383dc898c",
                "apiVersion": "v1"
            },
            "reason": "RegisteredNode",
            "message": "Node kind-control-plane event: Registered Node kind-control-plane in Controller",
            "source": {
                "component": "node-controller"
            },
            "firstTimestamp": "2023-01-03T01:13:45Z",
            "lastTimestamp": "2023-01-03T01:13:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a7741fa198a2",
                "namespace": "default",
                "uid": "3ff10e8f-bb1b-48cc-8ffc-b6ea00edb82d",
                "resourceVersion": "395",
                "creationTimestamp": "2023-01-03T01:13:48Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "Starting",
            "source": {},
            "firstTimestamp": null,
            "lastTimestamp": null,
            "type": "Normal",
            "eventTime": "2023-01-03T01:13:48.803445Z",
            "action": "StartKubeProxy",
            "reportingComponent": "kube-proxy",
            "reportingInstance": "kube-proxy-kind-control-plane"
        },
        {
            "metadata": {
                "name": "kind-control-plane.1736a77588b0aebb",
                "namespace": "default",
                "uid": "9c6356c4-8ffc-4a66-b650-25be7c13ba20",
                "resourceVersion": "408",
                "creationTimestamp": "2023-01-03T01:13:54Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "kind-control-plane",
                "uid": "kind-control-plane"
            },
            "reason": "NodeReady",
            "message": "Node kind-control-plane status is now: NodeReady",
            "source": {
                "component": "kubelet",
                "host": "kind-control-plane"
            },
            "firstTimestamp": "2023-01-03T01:13:54Z",
            "lastTimestamp": "2023-01-03T01:13:54Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "903"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "903"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "uid": "f0c11d67-969a-4a88-88ff-e20de6bdaf25",
                "resourceVersion": "192",
                "creationTimestamp": "2023-01-03T01:13:32Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 6443
                    }
                ],
                "clusterIP": "10.96.0.1",
                "clusterIPs": [
                    "10.96.0.1"
                ],
                "type": "ClusterIP",
                "sessionAffinity": "None",
                "ipFamilies": [
                    "IPv4"
                ],
                "ipFamilyPolicy": "SingleStack",
                "internalTrafficPolicy": "Cluster"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "903"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "903"
    },
    "items": []
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "903"
    },
    "items": []
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "903"
    },
    "items": []
}
